
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model BlackList
 * 
 */
export type BlackList = {
  id: string
  ip: string | null
  email: string | null
  keyword: string | null
}

/**
 * Model Article
 * 
 */
export type Article = {
  artid: string
  order: number
  authorId: string
  title: string
  description: string | null
  content: string
  keywords: string
  status: number
  cover: string
  password: string | null
  allowComment: boolean
  liking: number
  readers: number
  banner: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Comment
 * 
 */
export type Comment = {
  comid: string
  content: string
  nickname: string | null
  avatar: string | null
  email: string | null
  url: string | null
  ip: string | null
  agent: string | null
  city: string | null
  province: string | null
  sort: number
  liking: number
  status: number
  articleId: string
  articleTitle: string | null
  articleDescription: string | null
  parent: string | null
  parentId: string | null
  parentNickname: string | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Category
 * 
 */
export type Category = {
  catid: string
  name: string | null
  description: string | null
  sort: number | null
  relateCount: number | null
}

/**
 * Model CategoriesOnArticles
 * 
 */
export type CategoriesOnArticles = {
  articleId: string
  categoryId: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more BlackLists
 * const blackLists = await prisma.blackList.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more BlackLists
   * const blackLists = await prisma.blackList.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.blackList`: Exposes CRUD operations for the **BlackList** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BlackLists
    * const blackLists = await prisma.blackList.findMany()
    * ```
    */
  get blackList(): Prisma.BlackListDelegate<GlobalReject>;

  /**
   * `prisma.article`: Exposes CRUD operations for the **Article** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Articles
    * const articles = await prisma.article.findMany()
    * ```
    */
  get article(): Prisma.ArticleDelegate<GlobalReject>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<GlobalReject>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<GlobalReject>;

  /**
   * `prisma.categoriesOnArticles`: Exposes CRUD operations for the **CategoriesOnArticles** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CategoriesOnArticles
    * const categoriesOnArticles = await prisma.categoriesOnArticles.findMany()
    * ```
    */
  get categoriesOnArticles(): Prisma.CategoriesOnArticlesDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.6.1
   * Query Engine version: 694eea289a8462c80264df36757e4fdc129b1b32
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    BlackList: 'BlackList',
    Article: 'Article',
    Comment: 'Comment',
    Category: 'Category',
    CategoriesOnArticles: 'CategoriesOnArticles'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ArticleCountOutputType
   */


  export type ArticleCountOutputType = {
    comments: number
    categories: number
  }

  export type ArticleCountOutputTypeSelect = {
    comments?: boolean
    categories?: boolean
  }

  export type ArticleCountOutputTypeGetPayload<S extends boolean | null | undefined | ArticleCountOutputTypeArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ArticleCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ArticleCountOutputTypeArgs)
    ? ArticleCountOutputType 
    : S extends { select: any } & (ArticleCountOutputTypeArgs)
      ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ArticleCountOutputType ? ArticleCountOutputType[P] : never
  } 
      : ArticleCountOutputType




  // Custom InputTypes

  /**
   * ArticleCountOutputType without action
   */
  export type ArticleCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ArticleCountOutputType
     * 
    **/
    select?: ArticleCountOutputTypeSelect | null
  }



  /**
   * Count Type CategoryCountOutputType
   */


  export type CategoryCountOutputType = {
    articles: number
  }

  export type CategoryCountOutputTypeSelect = {
    articles?: boolean
  }

  export type CategoryCountOutputTypeGetPayload<S extends boolean | null | undefined | CategoryCountOutputTypeArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CategoryCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (CategoryCountOutputTypeArgs)
    ? CategoryCountOutputType 
    : S extends { select: any } & (CategoryCountOutputTypeArgs)
      ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof CategoryCountOutputType ? CategoryCountOutputType[P] : never
  } 
      : CategoryCountOutputType




  // Custom InputTypes

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     * 
    **/
    select?: CategoryCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model BlackList
   */


  export type AggregateBlackList = {
    _count: BlackListCountAggregateOutputType | null
    _min: BlackListMinAggregateOutputType | null
    _max: BlackListMaxAggregateOutputType | null
  }

  export type BlackListMinAggregateOutputType = {
    id: string | null
    ip: string | null
    email: string | null
    keyword: string | null
  }

  export type BlackListMaxAggregateOutputType = {
    id: string | null
    ip: string | null
    email: string | null
    keyword: string | null
  }

  export type BlackListCountAggregateOutputType = {
    id: number
    ip: number
    email: number
    keyword: number
    _all: number
  }


  export type BlackListMinAggregateInputType = {
    id?: true
    ip?: true
    email?: true
    keyword?: true
  }

  export type BlackListMaxAggregateInputType = {
    id?: true
    ip?: true
    email?: true
    keyword?: true
  }

  export type BlackListCountAggregateInputType = {
    id?: true
    ip?: true
    email?: true
    keyword?: true
    _all?: true
  }

  export type BlackListAggregateArgs = {
    /**
     * Filter which BlackList to aggregate.
     * 
    **/
    where?: BlackListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BlackLists to fetch.
     * 
    **/
    orderBy?: Enumerable<BlackListOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: BlackListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BlackLists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BlackLists.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BlackLists
    **/
    _count?: true | BlackListCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BlackListMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BlackListMaxAggregateInputType
  }

  export type GetBlackListAggregateType<T extends BlackListAggregateArgs> = {
        [P in keyof T & keyof AggregateBlackList]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBlackList[P]>
      : GetScalarType<T[P], AggregateBlackList[P]>
  }




  export type BlackListGroupByArgs = {
    where?: BlackListWhereInput
    orderBy?: Enumerable<BlackListOrderByWithAggregationInput>
    by: Array<BlackListScalarFieldEnum>
    having?: BlackListScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BlackListCountAggregateInputType | true
    _min?: BlackListMinAggregateInputType
    _max?: BlackListMaxAggregateInputType
  }


  export type BlackListGroupByOutputType = {
    id: string
    ip: string | null
    email: string | null
    keyword: string | null
    _count: BlackListCountAggregateOutputType | null
    _min: BlackListMinAggregateOutputType | null
    _max: BlackListMaxAggregateOutputType | null
  }

  type GetBlackListGroupByPayload<T extends BlackListGroupByArgs> = PrismaPromise<
    Array<
      PickArray<BlackListGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BlackListGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BlackListGroupByOutputType[P]>
            : GetScalarType<T[P], BlackListGroupByOutputType[P]>
        }
      >
    >


  export type BlackListSelect = {
    id?: boolean
    ip?: boolean
    email?: boolean
    keyword?: boolean
  }


  export type BlackListGetPayload<S extends boolean | null | undefined | BlackListArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? BlackList :
    S extends undefined ? never :
    S extends { include: any } & (BlackListArgs | BlackListFindManyArgs)
    ? BlackList 
    : S extends { select: any } & (BlackListArgs | BlackListFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof BlackList ? BlackList[P] : never
  } 
      : BlackList


  type BlackListCountArgs = Merge<
    Omit<BlackListFindManyArgs, 'select' | 'include'> & {
      select?: BlackListCountAggregateInputType | true
    }
  >

  export interface BlackListDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one BlackList that matches the filter.
     * @param {BlackListFindUniqueArgs} args - Arguments to find a BlackList
     * @example
     * // Get one BlackList
     * const blackList = await prisma.blackList.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BlackListFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BlackListFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'BlackList'> extends True ? Prisma__BlackListClient<BlackListGetPayload<T>> : Prisma__BlackListClient<BlackListGetPayload<T> | null, null>

    /**
     * Find the first BlackList that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlackListFindFirstArgs} args - Arguments to find a BlackList
     * @example
     * // Get one BlackList
     * const blackList = await prisma.blackList.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BlackListFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BlackListFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'BlackList'> extends True ? Prisma__BlackListClient<BlackListGetPayload<T>> : Prisma__BlackListClient<BlackListGetPayload<T> | null, null>

    /**
     * Find zero or more BlackLists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlackListFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BlackLists
     * const blackLists = await prisma.blackList.findMany()
     * 
     * // Get first 10 BlackLists
     * const blackLists = await prisma.blackList.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const blackListWithIdOnly = await prisma.blackList.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BlackListFindManyArgs>(
      args?: SelectSubset<T, BlackListFindManyArgs>
    ): PrismaPromise<Array<BlackListGetPayload<T>>>

    /**
     * Create a BlackList.
     * @param {BlackListCreateArgs} args - Arguments to create a BlackList.
     * @example
     * // Create one BlackList
     * const BlackList = await prisma.blackList.create({
     *   data: {
     *     // ... data to create a BlackList
     *   }
     * })
     * 
    **/
    create<T extends BlackListCreateArgs>(
      args: SelectSubset<T, BlackListCreateArgs>
    ): Prisma__BlackListClient<BlackListGetPayload<T>>

    /**
     * Create many BlackLists.
     *     @param {BlackListCreateManyArgs} args - Arguments to create many BlackLists.
     *     @example
     *     // Create many BlackLists
     *     const blackList = await prisma.blackList.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BlackListCreateManyArgs>(
      args?: SelectSubset<T, BlackListCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a BlackList.
     * @param {BlackListDeleteArgs} args - Arguments to delete one BlackList.
     * @example
     * // Delete one BlackList
     * const BlackList = await prisma.blackList.delete({
     *   where: {
     *     // ... filter to delete one BlackList
     *   }
     * })
     * 
    **/
    delete<T extends BlackListDeleteArgs>(
      args: SelectSubset<T, BlackListDeleteArgs>
    ): Prisma__BlackListClient<BlackListGetPayload<T>>

    /**
     * Update one BlackList.
     * @param {BlackListUpdateArgs} args - Arguments to update one BlackList.
     * @example
     * // Update one BlackList
     * const blackList = await prisma.blackList.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BlackListUpdateArgs>(
      args: SelectSubset<T, BlackListUpdateArgs>
    ): Prisma__BlackListClient<BlackListGetPayload<T>>

    /**
     * Delete zero or more BlackLists.
     * @param {BlackListDeleteManyArgs} args - Arguments to filter BlackLists to delete.
     * @example
     * // Delete a few BlackLists
     * const { count } = await prisma.blackList.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BlackListDeleteManyArgs>(
      args?: SelectSubset<T, BlackListDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more BlackLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlackListUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BlackLists
     * const blackList = await prisma.blackList.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BlackListUpdateManyArgs>(
      args: SelectSubset<T, BlackListUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one BlackList.
     * @param {BlackListUpsertArgs} args - Arguments to update or create a BlackList.
     * @example
     * // Update or create a BlackList
     * const blackList = await prisma.blackList.upsert({
     *   create: {
     *     // ... data to create a BlackList
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BlackList we want to update
     *   }
     * })
    **/
    upsert<T extends BlackListUpsertArgs>(
      args: SelectSubset<T, BlackListUpsertArgs>
    ): Prisma__BlackListClient<BlackListGetPayload<T>>

    /**
     * Find one BlackList that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {BlackListFindUniqueOrThrowArgs} args - Arguments to find a BlackList
     * @example
     * // Get one BlackList
     * const blackList = await prisma.blackList.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BlackListFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, BlackListFindUniqueOrThrowArgs>
    ): Prisma__BlackListClient<BlackListGetPayload<T>>

    /**
     * Find the first BlackList that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlackListFindFirstOrThrowArgs} args - Arguments to find a BlackList
     * @example
     * // Get one BlackList
     * const blackList = await prisma.blackList.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BlackListFindFirstOrThrowArgs>(
      args?: SelectSubset<T, BlackListFindFirstOrThrowArgs>
    ): Prisma__BlackListClient<BlackListGetPayload<T>>

    /**
     * Count the number of BlackLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlackListCountArgs} args - Arguments to filter BlackLists to count.
     * @example
     * // Count the number of BlackLists
     * const count = await prisma.blackList.count({
     *   where: {
     *     // ... the filter for the BlackLists we want to count
     *   }
     * })
    **/
    count<T extends BlackListCountArgs>(
      args?: Subset<T, BlackListCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BlackListCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BlackList.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlackListAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BlackListAggregateArgs>(args: Subset<T, BlackListAggregateArgs>): PrismaPromise<GetBlackListAggregateType<T>>

    /**
     * Group by BlackList.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlackListGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BlackListGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BlackListGroupByArgs['orderBy'] }
        : { orderBy?: BlackListGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BlackListGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBlackListGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for BlackList.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BlackListClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * BlackList base type for findUnique actions
   */
  export type BlackListFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the BlackList
     * 
    **/
    select?: BlackListSelect | null
    /**
     * Filter, which BlackList to fetch.
     * 
    **/
    where: BlackListWhereUniqueInput
  }

  /**
   * BlackList: findUnique
   */
  export interface BlackListFindUniqueArgs extends BlackListFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * BlackList base type for findFirst actions
   */
  export type BlackListFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the BlackList
     * 
    **/
    select?: BlackListSelect | null
    /**
     * Filter, which BlackList to fetch.
     * 
    **/
    where?: BlackListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BlackLists to fetch.
     * 
    **/
    orderBy?: Enumerable<BlackListOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BlackLists.
     * 
    **/
    cursor?: BlackListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BlackLists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BlackLists.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BlackLists.
     * 
    **/
    distinct?: Enumerable<BlackListScalarFieldEnum>
  }

  /**
   * BlackList: findFirst
   */
  export interface BlackListFindFirstArgs extends BlackListFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * BlackList findMany
   */
  export type BlackListFindManyArgs = {
    /**
     * Select specific fields to fetch from the BlackList
     * 
    **/
    select?: BlackListSelect | null
    /**
     * Filter, which BlackLists to fetch.
     * 
    **/
    where?: BlackListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BlackLists to fetch.
     * 
    **/
    orderBy?: Enumerable<BlackListOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BlackLists.
     * 
    **/
    cursor?: BlackListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BlackLists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BlackLists.
     * 
    **/
    skip?: number
    distinct?: Enumerable<BlackListScalarFieldEnum>
  }


  /**
   * BlackList create
   */
  export type BlackListCreateArgs = {
    /**
     * Select specific fields to fetch from the BlackList
     * 
    **/
    select?: BlackListSelect | null
    /**
     * The data needed to create a BlackList.
     * 
    **/
    data: XOR<BlackListCreateInput, BlackListUncheckedCreateInput>
  }


  /**
   * BlackList createMany
   */
  export type BlackListCreateManyArgs = {
    /**
     * The data used to create many BlackLists.
     * 
    **/
    data: Enumerable<BlackListCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * BlackList update
   */
  export type BlackListUpdateArgs = {
    /**
     * Select specific fields to fetch from the BlackList
     * 
    **/
    select?: BlackListSelect | null
    /**
     * The data needed to update a BlackList.
     * 
    **/
    data: XOR<BlackListUpdateInput, BlackListUncheckedUpdateInput>
    /**
     * Choose, which BlackList to update.
     * 
    **/
    where: BlackListWhereUniqueInput
  }


  /**
   * BlackList updateMany
   */
  export type BlackListUpdateManyArgs = {
    /**
     * The data used to update BlackLists.
     * 
    **/
    data: XOR<BlackListUpdateManyMutationInput, BlackListUncheckedUpdateManyInput>
    /**
     * Filter which BlackLists to update
     * 
    **/
    where?: BlackListWhereInput
  }


  /**
   * BlackList upsert
   */
  export type BlackListUpsertArgs = {
    /**
     * Select specific fields to fetch from the BlackList
     * 
    **/
    select?: BlackListSelect | null
    /**
     * The filter to search for the BlackList to update in case it exists.
     * 
    **/
    where: BlackListWhereUniqueInput
    /**
     * In case the BlackList found by the `where` argument doesn't exist, create a new BlackList with this data.
     * 
    **/
    create: XOR<BlackListCreateInput, BlackListUncheckedCreateInput>
    /**
     * In case the BlackList was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<BlackListUpdateInput, BlackListUncheckedUpdateInput>
  }


  /**
   * BlackList delete
   */
  export type BlackListDeleteArgs = {
    /**
     * Select specific fields to fetch from the BlackList
     * 
    **/
    select?: BlackListSelect | null
    /**
     * Filter which BlackList to delete.
     * 
    **/
    where: BlackListWhereUniqueInput
  }


  /**
   * BlackList deleteMany
   */
  export type BlackListDeleteManyArgs = {
    /**
     * Filter which BlackLists to delete
     * 
    **/
    where?: BlackListWhereInput
  }


  /**
   * BlackList: findUniqueOrThrow
   */
  export type BlackListFindUniqueOrThrowArgs = BlackListFindUniqueArgsBase
      

  /**
   * BlackList: findFirstOrThrow
   */
  export type BlackListFindFirstOrThrowArgs = BlackListFindFirstArgsBase
      

  /**
   * BlackList without action
   */
  export type BlackListArgs = {
    /**
     * Select specific fields to fetch from the BlackList
     * 
    **/
    select?: BlackListSelect | null
  }



  /**
   * Model Article
   */


  export type AggregateArticle = {
    _count: ArticleCountAggregateOutputType | null
    _avg: ArticleAvgAggregateOutputType | null
    _sum: ArticleSumAggregateOutputType | null
    _min: ArticleMinAggregateOutputType | null
    _max: ArticleMaxAggregateOutputType | null
  }

  export type ArticleAvgAggregateOutputType = {
    order: number | null
    status: number | null
    liking: number | null
    readers: number | null
    banner: number | null
  }

  export type ArticleSumAggregateOutputType = {
    order: number | null
    status: number | null
    liking: number | null
    readers: number | null
    banner: number | null
  }

  export type ArticleMinAggregateOutputType = {
    artid: string | null
    order: number | null
    authorId: string | null
    title: string | null
    description: string | null
    content: string | null
    keywords: string | null
    status: number | null
    cover: string | null
    password: string | null
    allowComment: boolean | null
    liking: number | null
    readers: number | null
    banner: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ArticleMaxAggregateOutputType = {
    artid: string | null
    order: number | null
    authorId: string | null
    title: string | null
    description: string | null
    content: string | null
    keywords: string | null
    status: number | null
    cover: string | null
    password: string | null
    allowComment: boolean | null
    liking: number | null
    readers: number | null
    banner: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ArticleCountAggregateOutputType = {
    artid: number
    order: number
    authorId: number
    title: number
    description: number
    content: number
    keywords: number
    status: number
    cover: number
    password: number
    allowComment: number
    liking: number
    readers: number
    banner: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ArticleAvgAggregateInputType = {
    order?: true
    status?: true
    liking?: true
    readers?: true
    banner?: true
  }

  export type ArticleSumAggregateInputType = {
    order?: true
    status?: true
    liking?: true
    readers?: true
    banner?: true
  }

  export type ArticleMinAggregateInputType = {
    artid?: true
    order?: true
    authorId?: true
    title?: true
    description?: true
    content?: true
    keywords?: true
    status?: true
    cover?: true
    password?: true
    allowComment?: true
    liking?: true
    readers?: true
    banner?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ArticleMaxAggregateInputType = {
    artid?: true
    order?: true
    authorId?: true
    title?: true
    description?: true
    content?: true
    keywords?: true
    status?: true
    cover?: true
    password?: true
    allowComment?: true
    liking?: true
    readers?: true
    banner?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ArticleCountAggregateInputType = {
    artid?: true
    order?: true
    authorId?: true
    title?: true
    description?: true
    content?: true
    keywords?: true
    status?: true
    cover?: true
    password?: true
    allowComment?: true
    liking?: true
    readers?: true
    banner?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ArticleAggregateArgs = {
    /**
     * Filter which Article to aggregate.
     * 
    **/
    where?: ArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Articles to fetch.
     * 
    **/
    orderBy?: Enumerable<ArticleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Articles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Articles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Articles
    **/
    _count?: true | ArticleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ArticleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ArticleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArticleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArticleMaxAggregateInputType
  }

  export type GetArticleAggregateType<T extends ArticleAggregateArgs> = {
        [P in keyof T & keyof AggregateArticle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArticle[P]>
      : GetScalarType<T[P], AggregateArticle[P]>
  }




  export type ArticleGroupByArgs = {
    where?: ArticleWhereInput
    orderBy?: Enumerable<ArticleOrderByWithAggregationInput>
    by: Array<ArticleScalarFieldEnum>
    having?: ArticleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArticleCountAggregateInputType | true
    _avg?: ArticleAvgAggregateInputType
    _sum?: ArticleSumAggregateInputType
    _min?: ArticleMinAggregateInputType
    _max?: ArticleMaxAggregateInputType
  }


  export type ArticleGroupByOutputType = {
    artid: string
    order: number
    authorId: string
    title: string
    description: string | null
    content: string
    keywords: string
    status: number
    cover: string
    password: string | null
    allowComment: boolean
    liking: number
    readers: number
    banner: number
    createdAt: Date
    updatedAt: Date
    _count: ArticleCountAggregateOutputType | null
    _avg: ArticleAvgAggregateOutputType | null
    _sum: ArticleSumAggregateOutputType | null
    _min: ArticleMinAggregateOutputType | null
    _max: ArticleMaxAggregateOutputType | null
  }

  type GetArticleGroupByPayload<T extends ArticleGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ArticleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArticleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArticleGroupByOutputType[P]>
            : GetScalarType<T[P], ArticleGroupByOutputType[P]>
        }
      >
    >


  export type ArticleSelect = {
    artid?: boolean
    order?: boolean
    authorId?: boolean
    title?: boolean
    description?: boolean
    content?: boolean
    keywords?: boolean
    status?: boolean
    cover?: boolean
    password?: boolean
    comments?: boolean | CommentFindManyArgs
    allowComment?: boolean
    liking?: boolean
    readers?: boolean
    banner?: boolean
    categories?: boolean | CategoriesOnArticlesFindManyArgs
    createdAt?: boolean
    updatedAt?: boolean
    _count?: boolean | ArticleCountOutputTypeArgs
  }


  export type ArticleInclude = {
    comments?: boolean | CommentFindManyArgs
    categories?: boolean | CategoriesOnArticlesFindManyArgs
    _count?: boolean | ArticleCountOutputTypeArgs
  } 

  export type ArticleGetPayload<S extends boolean | null | undefined | ArticleArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Article :
    S extends undefined ? never :
    S extends { include: any } & (ArticleArgs | ArticleFindManyArgs)
    ? Article  & {
    [P in TrueKeys<S['include']>]:
        P extends 'comments' ? Array < CommentGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'categories' ? Array < CategoriesOnArticlesGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? ArticleCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (ArticleArgs | ArticleFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'comments' ? Array < CommentGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'categories' ? Array < CategoriesOnArticlesGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? ArticleCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Article ? Article[P] : never
  } 
      : Article


  type ArticleCountArgs = Merge<
    Omit<ArticleFindManyArgs, 'select' | 'include'> & {
      select?: ArticleCountAggregateInputType | true
    }
  >

  export interface ArticleDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Article that matches the filter.
     * @param {ArticleFindUniqueArgs} args - Arguments to find a Article
     * @example
     * // Get one Article
     * const article = await prisma.article.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ArticleFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ArticleFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Article'> extends True ? Prisma__ArticleClient<ArticleGetPayload<T>> : Prisma__ArticleClient<ArticleGetPayload<T> | null, null>

    /**
     * Find the first Article that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleFindFirstArgs} args - Arguments to find a Article
     * @example
     * // Get one Article
     * const article = await prisma.article.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ArticleFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ArticleFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Article'> extends True ? Prisma__ArticleClient<ArticleGetPayload<T>> : Prisma__ArticleClient<ArticleGetPayload<T> | null, null>

    /**
     * Find zero or more Articles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Articles
     * const articles = await prisma.article.findMany()
     * 
     * // Get first 10 Articles
     * const articles = await prisma.article.findMany({ take: 10 })
     * 
     * // Only select the `artid`
     * const articleWithArtidOnly = await prisma.article.findMany({ select: { artid: true } })
     * 
    **/
    findMany<T extends ArticleFindManyArgs>(
      args?: SelectSubset<T, ArticleFindManyArgs>
    ): PrismaPromise<Array<ArticleGetPayload<T>>>

    /**
     * Create a Article.
     * @param {ArticleCreateArgs} args - Arguments to create a Article.
     * @example
     * // Create one Article
     * const Article = await prisma.article.create({
     *   data: {
     *     // ... data to create a Article
     *   }
     * })
     * 
    **/
    create<T extends ArticleCreateArgs>(
      args: SelectSubset<T, ArticleCreateArgs>
    ): Prisma__ArticleClient<ArticleGetPayload<T>>

    /**
     * Create many Articles.
     *     @param {ArticleCreateManyArgs} args - Arguments to create many Articles.
     *     @example
     *     // Create many Articles
     *     const article = await prisma.article.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ArticleCreateManyArgs>(
      args?: SelectSubset<T, ArticleCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Article.
     * @param {ArticleDeleteArgs} args - Arguments to delete one Article.
     * @example
     * // Delete one Article
     * const Article = await prisma.article.delete({
     *   where: {
     *     // ... filter to delete one Article
     *   }
     * })
     * 
    **/
    delete<T extends ArticleDeleteArgs>(
      args: SelectSubset<T, ArticleDeleteArgs>
    ): Prisma__ArticleClient<ArticleGetPayload<T>>

    /**
     * Update one Article.
     * @param {ArticleUpdateArgs} args - Arguments to update one Article.
     * @example
     * // Update one Article
     * const article = await prisma.article.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ArticleUpdateArgs>(
      args: SelectSubset<T, ArticleUpdateArgs>
    ): Prisma__ArticleClient<ArticleGetPayload<T>>

    /**
     * Delete zero or more Articles.
     * @param {ArticleDeleteManyArgs} args - Arguments to filter Articles to delete.
     * @example
     * // Delete a few Articles
     * const { count } = await prisma.article.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ArticleDeleteManyArgs>(
      args?: SelectSubset<T, ArticleDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Articles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Articles
     * const article = await prisma.article.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ArticleUpdateManyArgs>(
      args: SelectSubset<T, ArticleUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Article.
     * @param {ArticleUpsertArgs} args - Arguments to update or create a Article.
     * @example
     * // Update or create a Article
     * const article = await prisma.article.upsert({
     *   create: {
     *     // ... data to create a Article
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Article we want to update
     *   }
     * })
    **/
    upsert<T extends ArticleUpsertArgs>(
      args: SelectSubset<T, ArticleUpsertArgs>
    ): Prisma__ArticleClient<ArticleGetPayload<T>>

    /**
     * Find one Article that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {ArticleFindUniqueOrThrowArgs} args - Arguments to find a Article
     * @example
     * // Get one Article
     * const article = await prisma.article.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ArticleFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ArticleFindUniqueOrThrowArgs>
    ): Prisma__ArticleClient<ArticleGetPayload<T>>

    /**
     * Find the first Article that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleFindFirstOrThrowArgs} args - Arguments to find a Article
     * @example
     * // Get one Article
     * const article = await prisma.article.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ArticleFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ArticleFindFirstOrThrowArgs>
    ): Prisma__ArticleClient<ArticleGetPayload<T>>

    /**
     * Count the number of Articles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleCountArgs} args - Arguments to filter Articles to count.
     * @example
     * // Count the number of Articles
     * const count = await prisma.article.count({
     *   where: {
     *     // ... the filter for the Articles we want to count
     *   }
     * })
    **/
    count<T extends ArticleCountArgs>(
      args?: Subset<T, ArticleCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArticleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Article.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArticleAggregateArgs>(args: Subset<T, ArticleAggregateArgs>): PrismaPromise<GetArticleAggregateType<T>>

    /**
     * Group by Article.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArticleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArticleGroupByArgs['orderBy'] }
        : { orderBy?: ArticleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArticleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArticleGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Article.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ArticleClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    comments<T extends CommentFindManyArgs= {}>(args?: Subset<T, CommentFindManyArgs>): PrismaPromise<Array<CommentGetPayload<T>>| Null>;

    categories<T extends CategoriesOnArticlesFindManyArgs= {}>(args?: Subset<T, CategoriesOnArticlesFindManyArgs>): PrismaPromise<Array<CategoriesOnArticlesGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Article base type for findUnique actions
   */
  export type ArticleFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Article
     * 
    **/
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ArticleInclude | null
    /**
     * Filter, which Article to fetch.
     * 
    **/
    where: ArticleWhereUniqueInput
  }

  /**
   * Article: findUnique
   */
  export interface ArticleFindUniqueArgs extends ArticleFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Article base type for findFirst actions
   */
  export type ArticleFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Article
     * 
    **/
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ArticleInclude | null
    /**
     * Filter, which Article to fetch.
     * 
    **/
    where?: ArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Articles to fetch.
     * 
    **/
    orderBy?: Enumerable<ArticleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Articles.
     * 
    **/
    cursor?: ArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Articles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Articles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Articles.
     * 
    **/
    distinct?: Enumerable<ArticleScalarFieldEnum>
  }

  /**
   * Article: findFirst
   */
  export interface ArticleFindFirstArgs extends ArticleFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Article findMany
   */
  export type ArticleFindManyArgs = {
    /**
     * Select specific fields to fetch from the Article
     * 
    **/
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ArticleInclude | null
    /**
     * Filter, which Articles to fetch.
     * 
    **/
    where?: ArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Articles to fetch.
     * 
    **/
    orderBy?: Enumerable<ArticleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Articles.
     * 
    **/
    cursor?: ArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Articles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Articles.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ArticleScalarFieldEnum>
  }


  /**
   * Article create
   */
  export type ArticleCreateArgs = {
    /**
     * Select specific fields to fetch from the Article
     * 
    **/
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ArticleInclude | null
    /**
     * The data needed to create a Article.
     * 
    **/
    data: XOR<ArticleCreateInput, ArticleUncheckedCreateInput>
  }


  /**
   * Article createMany
   */
  export type ArticleCreateManyArgs = {
    /**
     * The data used to create many Articles.
     * 
    **/
    data: Enumerable<ArticleCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Article update
   */
  export type ArticleUpdateArgs = {
    /**
     * Select specific fields to fetch from the Article
     * 
    **/
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ArticleInclude | null
    /**
     * The data needed to update a Article.
     * 
    **/
    data: XOR<ArticleUpdateInput, ArticleUncheckedUpdateInput>
    /**
     * Choose, which Article to update.
     * 
    **/
    where: ArticleWhereUniqueInput
  }


  /**
   * Article updateMany
   */
  export type ArticleUpdateManyArgs = {
    /**
     * The data used to update Articles.
     * 
    **/
    data: XOR<ArticleUpdateManyMutationInput, ArticleUncheckedUpdateManyInput>
    /**
     * Filter which Articles to update
     * 
    **/
    where?: ArticleWhereInput
  }


  /**
   * Article upsert
   */
  export type ArticleUpsertArgs = {
    /**
     * Select specific fields to fetch from the Article
     * 
    **/
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ArticleInclude | null
    /**
     * The filter to search for the Article to update in case it exists.
     * 
    **/
    where: ArticleWhereUniqueInput
    /**
     * In case the Article found by the `where` argument doesn't exist, create a new Article with this data.
     * 
    **/
    create: XOR<ArticleCreateInput, ArticleUncheckedCreateInput>
    /**
     * In case the Article was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ArticleUpdateInput, ArticleUncheckedUpdateInput>
  }


  /**
   * Article delete
   */
  export type ArticleDeleteArgs = {
    /**
     * Select specific fields to fetch from the Article
     * 
    **/
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ArticleInclude | null
    /**
     * Filter which Article to delete.
     * 
    **/
    where: ArticleWhereUniqueInput
  }


  /**
   * Article deleteMany
   */
  export type ArticleDeleteManyArgs = {
    /**
     * Filter which Articles to delete
     * 
    **/
    where?: ArticleWhereInput
  }


  /**
   * Article: findUniqueOrThrow
   */
  export type ArticleFindUniqueOrThrowArgs = ArticleFindUniqueArgsBase
      

  /**
   * Article: findFirstOrThrow
   */
  export type ArticleFindFirstOrThrowArgs = ArticleFindFirstArgsBase
      

  /**
   * Article without action
   */
  export type ArticleArgs = {
    /**
     * Select specific fields to fetch from the Article
     * 
    **/
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ArticleInclude | null
  }



  /**
   * Model Comment
   */


  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentAvgAggregateOutputType = {
    sort: number | null
    liking: number | null
    status: number | null
  }

  export type CommentSumAggregateOutputType = {
    sort: number | null
    liking: number | null
    status: number | null
  }

  export type CommentMinAggregateOutputType = {
    comid: string | null
    content: string | null
    nickname: string | null
    avatar: string | null
    email: string | null
    url: string | null
    ip: string | null
    agent: string | null
    city: string | null
    province: string | null
    sort: number | null
    liking: number | null
    status: number | null
    articleId: string | null
    articleTitle: string | null
    articleDescription: string | null
    parent: string | null
    parentId: string | null
    parentNickname: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CommentMaxAggregateOutputType = {
    comid: string | null
    content: string | null
    nickname: string | null
    avatar: string | null
    email: string | null
    url: string | null
    ip: string | null
    agent: string | null
    city: string | null
    province: string | null
    sort: number | null
    liking: number | null
    status: number | null
    articleId: string | null
    articleTitle: string | null
    articleDescription: string | null
    parent: string | null
    parentId: string | null
    parentNickname: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CommentCountAggregateOutputType = {
    comid: number
    content: number
    nickname: number
    avatar: number
    email: number
    url: number
    ip: number
    agent: number
    city: number
    province: number
    sort: number
    liking: number
    status: number
    articleId: number
    articleTitle: number
    articleDescription: number
    parent: number
    parentId: number
    parentNickname: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CommentAvgAggregateInputType = {
    sort?: true
    liking?: true
    status?: true
  }

  export type CommentSumAggregateInputType = {
    sort?: true
    liking?: true
    status?: true
  }

  export type CommentMinAggregateInputType = {
    comid?: true
    content?: true
    nickname?: true
    avatar?: true
    email?: true
    url?: true
    ip?: true
    agent?: true
    city?: true
    province?: true
    sort?: true
    liking?: true
    status?: true
    articleId?: true
    articleTitle?: true
    articleDescription?: true
    parent?: true
    parentId?: true
    parentNickname?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CommentMaxAggregateInputType = {
    comid?: true
    content?: true
    nickname?: true
    avatar?: true
    email?: true
    url?: true
    ip?: true
    agent?: true
    city?: true
    province?: true
    sort?: true
    liking?: true
    status?: true
    articleId?: true
    articleTitle?: true
    articleDescription?: true
    parent?: true
    parentId?: true
    parentNickname?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CommentCountAggregateInputType = {
    comid?: true
    content?: true
    nickname?: true
    avatar?: true
    email?: true
    url?: true
    ip?: true
    agent?: true
    city?: true
    province?: true
    sort?: true
    liking?: true
    status?: true
    articleId?: true
    articleTitle?: true
    articleDescription?: true
    parent?: true
    parentId?: true
    parentNickname?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CommentAggregateArgs = {
    /**
     * Filter which Comment to aggregate.
     * 
    **/
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     * 
    **/
    orderBy?: Enumerable<CommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs = {
    where?: CommentWhereInput
    orderBy?: Enumerable<CommentOrderByWithAggregationInput>
    by: Array<CommentScalarFieldEnum>
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _avg?: CommentAvgAggregateInputType
    _sum?: CommentSumAggregateInputType
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }


  export type CommentGroupByOutputType = {
    comid: string
    content: string
    nickname: string | null
    avatar: string | null
    email: string | null
    url: string | null
    ip: string | null
    agent: string | null
    city: string | null
    province: string | null
    sort: number
    liking: number
    status: number
    articleId: string
    articleTitle: string | null
    articleDescription: string | null
    parent: string | null
    parentId: string | null
    parentNickname: string | null
    createdAt: Date
    updatedAt: Date
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect = {
    comid?: boolean
    content?: boolean
    nickname?: boolean
    avatar?: boolean
    email?: boolean
    url?: boolean
    ip?: boolean
    agent?: boolean
    city?: boolean
    province?: boolean
    sort?: boolean
    liking?: boolean
    status?: boolean
    article?: boolean | ArticleArgs
    articleId?: boolean
    articleTitle?: boolean
    articleDescription?: boolean
    parent?: boolean
    parentId?: boolean
    parentNickname?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type CommentInclude = {
    article?: boolean | ArticleArgs
  } 

  export type CommentGetPayload<S extends boolean | null | undefined | CommentArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Comment :
    S extends undefined ? never :
    S extends { include: any } & (CommentArgs | CommentFindManyArgs)
    ? Comment  & {
    [P in TrueKeys<S['include']>]:
        P extends 'article' ? ArticleGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (CommentArgs | CommentFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'article' ? ArticleGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Comment ? Comment[P] : never
  } 
      : Comment


  type CommentCountArgs = Merge<
    Omit<CommentFindManyArgs, 'select' | 'include'> & {
      select?: CommentCountAggregateInputType | true
    }
  >

  export interface CommentDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CommentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CommentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Comment'> extends True ? Prisma__CommentClient<CommentGetPayload<T>> : Prisma__CommentClient<CommentGetPayload<T> | null, null>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CommentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CommentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Comment'> extends True ? Prisma__CommentClient<CommentGetPayload<T>> : Prisma__CommentClient<CommentGetPayload<T> | null, null>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `comid`
     * const commentWithComidOnly = await prisma.comment.findMany({ select: { comid: true } })
     * 
    **/
    findMany<T extends CommentFindManyArgs>(
      args?: SelectSubset<T, CommentFindManyArgs>
    ): PrismaPromise<Array<CommentGetPayload<T>>>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
    **/
    create<T extends CommentCreateArgs>(
      args: SelectSubset<T, CommentCreateArgs>
    ): Prisma__CommentClient<CommentGetPayload<T>>

    /**
     * Create many Comments.
     *     @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     *     @example
     *     // Create many Comments
     *     const comment = await prisma.comment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CommentCreateManyArgs>(
      args?: SelectSubset<T, CommentCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
    **/
    delete<T extends CommentDeleteArgs>(
      args: SelectSubset<T, CommentDeleteArgs>
    ): Prisma__CommentClient<CommentGetPayload<T>>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CommentUpdateArgs>(
      args: SelectSubset<T, CommentUpdateArgs>
    ): Prisma__CommentClient<CommentGetPayload<T>>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CommentDeleteManyArgs>(
      args?: SelectSubset<T, CommentDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CommentUpdateManyArgs>(
      args: SelectSubset<T, CommentUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
    **/
    upsert<T extends CommentUpsertArgs>(
      args: SelectSubset<T, CommentUpsertArgs>
    ): Prisma__CommentClient<CommentGetPayload<T>>

    /**
     * Find one Comment that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CommentFindUniqueOrThrowArgs>
    ): Prisma__CommentClient<CommentGetPayload<T>>

    /**
     * Find the first Comment that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CommentFindFirstOrThrowArgs>
    ): Prisma__CommentClient<CommentGetPayload<T>>

    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CommentClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    article<T extends ArticleArgs= {}>(args?: Subset<T, ArticleArgs>): Prisma__ArticleClient<ArticleGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Comment base type for findUnique actions
   */
  export type CommentFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Comment
     * 
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentInclude | null
    /**
     * Filter, which Comment to fetch.
     * 
    **/
    where: CommentWhereUniqueInput
  }

  /**
   * Comment: findUnique
   */
  export interface CommentFindUniqueArgs extends CommentFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Comment base type for findFirst actions
   */
  export type CommentFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Comment
     * 
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentInclude | null
    /**
     * Filter, which Comment to fetch.
     * 
    **/
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     * 
    **/
    orderBy?: Enumerable<CommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     * 
    **/
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     * 
    **/
    distinct?: Enumerable<CommentScalarFieldEnum>
  }

  /**
   * Comment: findFirst
   */
  export interface CommentFindFirstArgs extends CommentFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Comment findMany
   */
  export type CommentFindManyArgs = {
    /**
     * Select specific fields to fetch from the Comment
     * 
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentInclude | null
    /**
     * Filter, which Comments to fetch.
     * 
    **/
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     * 
    **/
    orderBy?: Enumerable<CommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     * 
    **/
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CommentScalarFieldEnum>
  }


  /**
   * Comment create
   */
  export type CommentCreateArgs = {
    /**
     * Select specific fields to fetch from the Comment
     * 
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentInclude | null
    /**
     * The data needed to create a Comment.
     * 
    **/
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }


  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs = {
    /**
     * The data used to create many Comments.
     * 
    **/
    data: Enumerable<CommentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Comment update
   */
  export type CommentUpdateArgs = {
    /**
     * Select specific fields to fetch from the Comment
     * 
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentInclude | null
    /**
     * The data needed to update a Comment.
     * 
    **/
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     * 
    **/
    where: CommentWhereUniqueInput
  }


  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs = {
    /**
     * The data used to update Comments.
     * 
    **/
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     * 
    **/
    where?: CommentWhereInput
  }


  /**
   * Comment upsert
   */
  export type CommentUpsertArgs = {
    /**
     * Select specific fields to fetch from the Comment
     * 
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentInclude | null
    /**
     * The filter to search for the Comment to update in case it exists.
     * 
    **/
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     * 
    **/
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }


  /**
   * Comment delete
   */
  export type CommentDeleteArgs = {
    /**
     * Select specific fields to fetch from the Comment
     * 
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentInclude | null
    /**
     * Filter which Comment to delete.
     * 
    **/
    where: CommentWhereUniqueInput
  }


  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs = {
    /**
     * Filter which Comments to delete
     * 
    **/
    where?: CommentWhereInput
  }


  /**
   * Comment: findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs = CommentFindUniqueArgsBase
      

  /**
   * Comment: findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs = CommentFindFirstArgsBase
      

  /**
   * Comment without action
   */
  export type CommentArgs = {
    /**
     * Select specific fields to fetch from the Comment
     * 
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentInclude | null
  }



  /**
   * Model Category
   */


  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    sort: number | null
    relateCount: number | null
  }

  export type CategorySumAggregateOutputType = {
    sort: number | null
    relateCount: number | null
  }

  export type CategoryMinAggregateOutputType = {
    catid: string | null
    name: string | null
    description: string | null
    sort: number | null
    relateCount: number | null
  }

  export type CategoryMaxAggregateOutputType = {
    catid: string | null
    name: string | null
    description: string | null
    sort: number | null
    relateCount: number | null
  }

  export type CategoryCountAggregateOutputType = {
    catid: number
    name: number
    description: number
    sort: number
    relateCount: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    sort?: true
    relateCount?: true
  }

  export type CategorySumAggregateInputType = {
    sort?: true
    relateCount?: true
  }

  export type CategoryMinAggregateInputType = {
    catid?: true
    name?: true
    description?: true
    sort?: true
    relateCount?: true
  }

  export type CategoryMaxAggregateInputType = {
    catid?: true
    name?: true
    description?: true
    sort?: true
    relateCount?: true
  }

  export type CategoryCountAggregateInputType = {
    catid?: true
    name?: true
    description?: true
    sort?: true
    relateCount?: true
    _all?: true
  }

  export type CategoryAggregateArgs = {
    /**
     * Filter which Category to aggregate.
     * 
    **/
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs = {
    where?: CategoryWhereInput
    orderBy?: Enumerable<CategoryOrderByWithAggregationInput>
    by: Array<CategoryScalarFieldEnum>
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }


  export type CategoryGroupByOutputType = {
    catid: string
    name: string | null
    description: string | null
    sort: number | null
    relateCount: number | null
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect = {
    catid?: boolean
    name?: boolean
    description?: boolean
    sort?: boolean
    relateCount?: boolean
    articles?: boolean | CategoriesOnArticlesFindManyArgs
    _count?: boolean | CategoryCountOutputTypeArgs
  }


  export type CategoryInclude = {
    articles?: boolean | CategoriesOnArticlesFindManyArgs
    _count?: boolean | CategoryCountOutputTypeArgs
  } 

  export type CategoryGetPayload<S extends boolean | null | undefined | CategoryArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Category :
    S extends undefined ? never :
    S extends { include: any } & (CategoryArgs | CategoryFindManyArgs)
    ? Category  & {
    [P in TrueKeys<S['include']>]:
        P extends 'articles' ? Array < CategoriesOnArticlesGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? CategoryCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (CategoryArgs | CategoryFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'articles' ? Array < CategoriesOnArticlesGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? CategoryCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Category ? Category[P] : never
  } 
      : Category


  type CategoryCountArgs = Merge<
    Omit<CategoryFindManyArgs, 'select' | 'include'> & {
      select?: CategoryCountAggregateInputType | true
    }
  >

  export interface CategoryDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CategoryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Category'> extends True ? Prisma__CategoryClient<CategoryGetPayload<T>> : Prisma__CategoryClient<CategoryGetPayload<T> | null, null>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CategoryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Category'> extends True ? Prisma__CategoryClient<CategoryGetPayload<T>> : Prisma__CategoryClient<CategoryGetPayload<T> | null, null>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `catid`
     * const categoryWithCatidOnly = await prisma.category.findMany({ select: { catid: true } })
     * 
    **/
    findMany<T extends CategoryFindManyArgs>(
      args?: SelectSubset<T, CategoryFindManyArgs>
    ): PrismaPromise<Array<CategoryGetPayload<T>>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
    **/
    create<T extends CategoryCreateArgs>(
      args: SelectSubset<T, CategoryCreateArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>

    /**
     * Create many Categories.
     *     @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const category = await prisma.category.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CategoryCreateManyArgs>(
      args?: SelectSubset<T, CategoryCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
    **/
    delete<T extends CategoryDeleteArgs>(
      args: SelectSubset<T, CategoryDeleteArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoryUpdateArgs>(
      args: SelectSubset<T, CategoryUpdateArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoryDeleteManyArgs>(
      args?: SelectSubset<T, CategoryDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoryUpdateManyArgs>(
      args: SelectSubset<T, CategoryUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
    **/
    upsert<T extends CategoryUpsertArgs>(
      args: SelectSubset<T, CategoryUpsertArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>

    /**
     * Find one Category that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CategoryFindUniqueOrThrowArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>

    /**
     * Find the first Category that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CategoryFindFirstOrThrowArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CategoryClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    articles<T extends CategoriesOnArticlesFindManyArgs= {}>(args?: Subset<T, CategoriesOnArticlesFindManyArgs>): PrismaPromise<Array<CategoriesOnArticlesGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Category base type for findUnique actions
   */
  export type CategoryFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Filter, which Category to fetch.
     * 
    **/
    where: CategoryWhereUniqueInput
  }

  /**
   * Category: findUnique
   */
  export interface CategoryFindUniqueArgs extends CategoryFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Category base type for findFirst actions
   */
  export type CategoryFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Filter, which Category to fetch.
     * 
    **/
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     * 
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     * 
    **/
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }

  /**
   * Category: findFirst
   */
  export interface CategoryFindFirstArgs extends CategoryFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Filter, which Categories to fetch.
     * 
    **/
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     * 
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }


  /**
   * Category create
   */
  export type CategoryCreateArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * The data needed to create a Category.
     * 
    **/
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }


  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs = {
    /**
     * The data used to create many Categories.
     * 
    **/
    data: Enumerable<CategoryCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Category update
   */
  export type CategoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * The data needed to update a Category.
     * 
    **/
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     * 
    **/
    where: CategoryWhereUniqueInput
  }


  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs = {
    /**
     * The data used to update Categories.
     * 
    **/
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     * 
    **/
    where?: CategoryWhereInput
  }


  /**
   * Category upsert
   */
  export type CategoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * The filter to search for the Category to update in case it exists.
     * 
    **/
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     * 
    **/
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }


  /**
   * Category delete
   */
  export type CategoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Filter which Category to delete.
     * 
    **/
    where: CategoryWhereUniqueInput
  }


  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs = {
    /**
     * Filter which Categories to delete
     * 
    **/
    where?: CategoryWhereInput
  }


  /**
   * Category: findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs = CategoryFindUniqueArgsBase
      

  /**
   * Category: findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs = CategoryFindFirstArgsBase
      

  /**
   * Category without action
   */
  export type CategoryArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
  }



  /**
   * Model CategoriesOnArticles
   */


  export type AggregateCategoriesOnArticles = {
    _count: CategoriesOnArticlesCountAggregateOutputType | null
    _min: CategoriesOnArticlesMinAggregateOutputType | null
    _max: CategoriesOnArticlesMaxAggregateOutputType | null
  }

  export type CategoriesOnArticlesMinAggregateOutputType = {
    articleId: string | null
    categoryId: string | null
  }

  export type CategoriesOnArticlesMaxAggregateOutputType = {
    articleId: string | null
    categoryId: string | null
  }

  export type CategoriesOnArticlesCountAggregateOutputType = {
    articleId: number
    categoryId: number
    _all: number
  }


  export type CategoriesOnArticlesMinAggregateInputType = {
    articleId?: true
    categoryId?: true
  }

  export type CategoriesOnArticlesMaxAggregateInputType = {
    articleId?: true
    categoryId?: true
  }

  export type CategoriesOnArticlesCountAggregateInputType = {
    articleId?: true
    categoryId?: true
    _all?: true
  }

  export type CategoriesOnArticlesAggregateArgs = {
    /**
     * Filter which CategoriesOnArticles to aggregate.
     * 
    **/
    where?: CategoriesOnArticlesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoriesOnArticles to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoriesOnArticlesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CategoriesOnArticlesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoriesOnArticles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoriesOnArticles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CategoriesOnArticles
    **/
    _count?: true | CategoriesOnArticlesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriesOnArticlesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriesOnArticlesMaxAggregateInputType
  }

  export type GetCategoriesOnArticlesAggregateType<T extends CategoriesOnArticlesAggregateArgs> = {
        [P in keyof T & keyof AggregateCategoriesOnArticles]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategoriesOnArticles[P]>
      : GetScalarType<T[P], AggregateCategoriesOnArticles[P]>
  }




  export type CategoriesOnArticlesGroupByArgs = {
    where?: CategoriesOnArticlesWhereInput
    orderBy?: Enumerable<CategoriesOnArticlesOrderByWithAggregationInput>
    by: Array<CategoriesOnArticlesScalarFieldEnum>
    having?: CategoriesOnArticlesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriesOnArticlesCountAggregateInputType | true
    _min?: CategoriesOnArticlesMinAggregateInputType
    _max?: CategoriesOnArticlesMaxAggregateInputType
  }


  export type CategoriesOnArticlesGroupByOutputType = {
    articleId: string
    categoryId: string
    _count: CategoriesOnArticlesCountAggregateOutputType | null
    _min: CategoriesOnArticlesMinAggregateOutputType | null
    _max: CategoriesOnArticlesMaxAggregateOutputType | null
  }

  type GetCategoriesOnArticlesGroupByPayload<T extends CategoriesOnArticlesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CategoriesOnArticlesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoriesOnArticlesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoriesOnArticlesGroupByOutputType[P]>
            : GetScalarType<T[P], CategoriesOnArticlesGroupByOutputType[P]>
        }
      >
    >


  export type CategoriesOnArticlesSelect = {
    article?: boolean | ArticleArgs
    articleId?: boolean
    category?: boolean | CategoryArgs
    categoryId?: boolean
  }


  export type CategoriesOnArticlesInclude = {
    article?: boolean | ArticleArgs
    category?: boolean | CategoryArgs
  } 

  export type CategoriesOnArticlesGetPayload<S extends boolean | null | undefined | CategoriesOnArticlesArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CategoriesOnArticles :
    S extends undefined ? never :
    S extends { include: any } & (CategoriesOnArticlesArgs | CategoriesOnArticlesFindManyArgs)
    ? CategoriesOnArticles  & {
    [P in TrueKeys<S['include']>]:
        P extends 'article' ? ArticleGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'category' ? CategoryGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (CategoriesOnArticlesArgs | CategoriesOnArticlesFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'article' ? ArticleGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'category' ? CategoryGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof CategoriesOnArticles ? CategoriesOnArticles[P] : never
  } 
      : CategoriesOnArticles


  type CategoriesOnArticlesCountArgs = Merge<
    Omit<CategoriesOnArticlesFindManyArgs, 'select' | 'include'> & {
      select?: CategoriesOnArticlesCountAggregateInputType | true
    }
  >

  export interface CategoriesOnArticlesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one CategoriesOnArticles that matches the filter.
     * @param {CategoriesOnArticlesFindUniqueArgs} args - Arguments to find a CategoriesOnArticles
     * @example
     * // Get one CategoriesOnArticles
     * const categoriesOnArticles = await prisma.categoriesOnArticles.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoriesOnArticlesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CategoriesOnArticlesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'CategoriesOnArticles'> extends True ? Prisma__CategoriesOnArticlesClient<CategoriesOnArticlesGetPayload<T>> : Prisma__CategoriesOnArticlesClient<CategoriesOnArticlesGetPayload<T> | null, null>

    /**
     * Find the first CategoriesOnArticles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesOnArticlesFindFirstArgs} args - Arguments to find a CategoriesOnArticles
     * @example
     * // Get one CategoriesOnArticles
     * const categoriesOnArticles = await prisma.categoriesOnArticles.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoriesOnArticlesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CategoriesOnArticlesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'CategoriesOnArticles'> extends True ? Prisma__CategoriesOnArticlesClient<CategoriesOnArticlesGetPayload<T>> : Prisma__CategoriesOnArticlesClient<CategoriesOnArticlesGetPayload<T> | null, null>

    /**
     * Find zero or more CategoriesOnArticles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesOnArticlesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CategoriesOnArticles
     * const categoriesOnArticles = await prisma.categoriesOnArticles.findMany()
     * 
     * // Get first 10 CategoriesOnArticles
     * const categoriesOnArticles = await prisma.categoriesOnArticles.findMany({ take: 10 })
     * 
     * // Only select the `articleId`
     * const categoriesOnArticlesWithArticleIdOnly = await prisma.categoriesOnArticles.findMany({ select: { articleId: true } })
     * 
    **/
    findMany<T extends CategoriesOnArticlesFindManyArgs>(
      args?: SelectSubset<T, CategoriesOnArticlesFindManyArgs>
    ): PrismaPromise<Array<CategoriesOnArticlesGetPayload<T>>>

    /**
     * Create a CategoriesOnArticles.
     * @param {CategoriesOnArticlesCreateArgs} args - Arguments to create a CategoriesOnArticles.
     * @example
     * // Create one CategoriesOnArticles
     * const CategoriesOnArticles = await prisma.categoriesOnArticles.create({
     *   data: {
     *     // ... data to create a CategoriesOnArticles
     *   }
     * })
     * 
    **/
    create<T extends CategoriesOnArticlesCreateArgs>(
      args: SelectSubset<T, CategoriesOnArticlesCreateArgs>
    ): Prisma__CategoriesOnArticlesClient<CategoriesOnArticlesGetPayload<T>>

    /**
     * Create many CategoriesOnArticles.
     *     @param {CategoriesOnArticlesCreateManyArgs} args - Arguments to create many CategoriesOnArticles.
     *     @example
     *     // Create many CategoriesOnArticles
     *     const categoriesOnArticles = await prisma.categoriesOnArticles.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CategoriesOnArticlesCreateManyArgs>(
      args?: SelectSubset<T, CategoriesOnArticlesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a CategoriesOnArticles.
     * @param {CategoriesOnArticlesDeleteArgs} args - Arguments to delete one CategoriesOnArticles.
     * @example
     * // Delete one CategoriesOnArticles
     * const CategoriesOnArticles = await prisma.categoriesOnArticles.delete({
     *   where: {
     *     // ... filter to delete one CategoriesOnArticles
     *   }
     * })
     * 
    **/
    delete<T extends CategoriesOnArticlesDeleteArgs>(
      args: SelectSubset<T, CategoriesOnArticlesDeleteArgs>
    ): Prisma__CategoriesOnArticlesClient<CategoriesOnArticlesGetPayload<T>>

    /**
     * Update one CategoriesOnArticles.
     * @param {CategoriesOnArticlesUpdateArgs} args - Arguments to update one CategoriesOnArticles.
     * @example
     * // Update one CategoriesOnArticles
     * const categoriesOnArticles = await prisma.categoriesOnArticles.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoriesOnArticlesUpdateArgs>(
      args: SelectSubset<T, CategoriesOnArticlesUpdateArgs>
    ): Prisma__CategoriesOnArticlesClient<CategoriesOnArticlesGetPayload<T>>

    /**
     * Delete zero or more CategoriesOnArticles.
     * @param {CategoriesOnArticlesDeleteManyArgs} args - Arguments to filter CategoriesOnArticles to delete.
     * @example
     * // Delete a few CategoriesOnArticles
     * const { count } = await prisma.categoriesOnArticles.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoriesOnArticlesDeleteManyArgs>(
      args?: SelectSubset<T, CategoriesOnArticlesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more CategoriesOnArticles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesOnArticlesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CategoriesOnArticles
     * const categoriesOnArticles = await prisma.categoriesOnArticles.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoriesOnArticlesUpdateManyArgs>(
      args: SelectSubset<T, CategoriesOnArticlesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one CategoriesOnArticles.
     * @param {CategoriesOnArticlesUpsertArgs} args - Arguments to update or create a CategoriesOnArticles.
     * @example
     * // Update or create a CategoriesOnArticles
     * const categoriesOnArticles = await prisma.categoriesOnArticles.upsert({
     *   create: {
     *     // ... data to create a CategoriesOnArticles
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CategoriesOnArticles we want to update
     *   }
     * })
    **/
    upsert<T extends CategoriesOnArticlesUpsertArgs>(
      args: SelectSubset<T, CategoriesOnArticlesUpsertArgs>
    ): Prisma__CategoriesOnArticlesClient<CategoriesOnArticlesGetPayload<T>>

    /**
     * Find one CategoriesOnArticles that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {CategoriesOnArticlesFindUniqueOrThrowArgs} args - Arguments to find a CategoriesOnArticles
     * @example
     * // Get one CategoriesOnArticles
     * const categoriesOnArticles = await prisma.categoriesOnArticles.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CategoriesOnArticlesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CategoriesOnArticlesFindUniqueOrThrowArgs>
    ): Prisma__CategoriesOnArticlesClient<CategoriesOnArticlesGetPayload<T>>

    /**
     * Find the first CategoriesOnArticles that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesOnArticlesFindFirstOrThrowArgs} args - Arguments to find a CategoriesOnArticles
     * @example
     * // Get one CategoriesOnArticles
     * const categoriesOnArticles = await prisma.categoriesOnArticles.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CategoriesOnArticlesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CategoriesOnArticlesFindFirstOrThrowArgs>
    ): Prisma__CategoriesOnArticlesClient<CategoriesOnArticlesGetPayload<T>>

    /**
     * Count the number of CategoriesOnArticles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesOnArticlesCountArgs} args - Arguments to filter CategoriesOnArticles to count.
     * @example
     * // Count the number of CategoriesOnArticles
     * const count = await prisma.categoriesOnArticles.count({
     *   where: {
     *     // ... the filter for the CategoriesOnArticles we want to count
     *   }
     * })
    **/
    count<T extends CategoriesOnArticlesCountArgs>(
      args?: Subset<T, CategoriesOnArticlesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriesOnArticlesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CategoriesOnArticles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesOnArticlesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriesOnArticlesAggregateArgs>(args: Subset<T, CategoriesOnArticlesAggregateArgs>): PrismaPromise<GetCategoriesOnArticlesAggregateType<T>>

    /**
     * Group by CategoriesOnArticles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesOnArticlesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoriesOnArticlesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoriesOnArticlesGroupByArgs['orderBy'] }
        : { orderBy?: CategoriesOnArticlesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoriesOnArticlesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriesOnArticlesGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for CategoriesOnArticles.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CategoriesOnArticlesClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    article<T extends ArticleArgs= {}>(args?: Subset<T, ArticleArgs>): Prisma__ArticleClient<ArticleGetPayload<T> | Null>;

    category<T extends CategoryArgs= {}>(args?: Subset<T, CategoryArgs>): Prisma__CategoryClient<CategoryGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * CategoriesOnArticles base type for findUnique actions
   */
  export type CategoriesOnArticlesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the CategoriesOnArticles
     * 
    **/
    select?: CategoriesOnArticlesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoriesOnArticlesInclude | null
    /**
     * Filter, which CategoriesOnArticles to fetch.
     * 
    **/
    where: CategoriesOnArticlesWhereUniqueInput
  }

  /**
   * CategoriesOnArticles: findUnique
   */
  export interface CategoriesOnArticlesFindUniqueArgs extends CategoriesOnArticlesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CategoriesOnArticles base type for findFirst actions
   */
  export type CategoriesOnArticlesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the CategoriesOnArticles
     * 
    **/
    select?: CategoriesOnArticlesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoriesOnArticlesInclude | null
    /**
     * Filter, which CategoriesOnArticles to fetch.
     * 
    **/
    where?: CategoriesOnArticlesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoriesOnArticles to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoriesOnArticlesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CategoriesOnArticles.
     * 
    **/
    cursor?: CategoriesOnArticlesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoriesOnArticles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoriesOnArticles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CategoriesOnArticles.
     * 
    **/
    distinct?: Enumerable<CategoriesOnArticlesScalarFieldEnum>
  }

  /**
   * CategoriesOnArticles: findFirst
   */
  export interface CategoriesOnArticlesFindFirstArgs extends CategoriesOnArticlesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CategoriesOnArticles findMany
   */
  export type CategoriesOnArticlesFindManyArgs = {
    /**
     * Select specific fields to fetch from the CategoriesOnArticles
     * 
    **/
    select?: CategoriesOnArticlesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoriesOnArticlesInclude | null
    /**
     * Filter, which CategoriesOnArticles to fetch.
     * 
    **/
    where?: CategoriesOnArticlesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoriesOnArticles to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoriesOnArticlesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CategoriesOnArticles.
     * 
    **/
    cursor?: CategoriesOnArticlesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoriesOnArticles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoriesOnArticles.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CategoriesOnArticlesScalarFieldEnum>
  }


  /**
   * CategoriesOnArticles create
   */
  export type CategoriesOnArticlesCreateArgs = {
    /**
     * Select specific fields to fetch from the CategoriesOnArticles
     * 
    **/
    select?: CategoriesOnArticlesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoriesOnArticlesInclude | null
    /**
     * The data needed to create a CategoriesOnArticles.
     * 
    **/
    data: XOR<CategoriesOnArticlesCreateInput, CategoriesOnArticlesUncheckedCreateInput>
  }


  /**
   * CategoriesOnArticles createMany
   */
  export type CategoriesOnArticlesCreateManyArgs = {
    /**
     * The data used to create many CategoriesOnArticles.
     * 
    **/
    data: Enumerable<CategoriesOnArticlesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * CategoriesOnArticles update
   */
  export type CategoriesOnArticlesUpdateArgs = {
    /**
     * Select specific fields to fetch from the CategoriesOnArticles
     * 
    **/
    select?: CategoriesOnArticlesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoriesOnArticlesInclude | null
    /**
     * The data needed to update a CategoriesOnArticles.
     * 
    **/
    data: XOR<CategoriesOnArticlesUpdateInput, CategoriesOnArticlesUncheckedUpdateInput>
    /**
     * Choose, which CategoriesOnArticles to update.
     * 
    **/
    where: CategoriesOnArticlesWhereUniqueInput
  }


  /**
   * CategoriesOnArticles updateMany
   */
  export type CategoriesOnArticlesUpdateManyArgs = {
    /**
     * The data used to update CategoriesOnArticles.
     * 
    **/
    data: XOR<CategoriesOnArticlesUpdateManyMutationInput, CategoriesOnArticlesUncheckedUpdateManyInput>
    /**
     * Filter which CategoriesOnArticles to update
     * 
    **/
    where?: CategoriesOnArticlesWhereInput
  }


  /**
   * CategoriesOnArticles upsert
   */
  export type CategoriesOnArticlesUpsertArgs = {
    /**
     * Select specific fields to fetch from the CategoriesOnArticles
     * 
    **/
    select?: CategoriesOnArticlesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoriesOnArticlesInclude | null
    /**
     * The filter to search for the CategoriesOnArticles to update in case it exists.
     * 
    **/
    where: CategoriesOnArticlesWhereUniqueInput
    /**
     * In case the CategoriesOnArticles found by the `where` argument doesn't exist, create a new CategoriesOnArticles with this data.
     * 
    **/
    create: XOR<CategoriesOnArticlesCreateInput, CategoriesOnArticlesUncheckedCreateInput>
    /**
     * In case the CategoriesOnArticles was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CategoriesOnArticlesUpdateInput, CategoriesOnArticlesUncheckedUpdateInput>
  }


  /**
   * CategoriesOnArticles delete
   */
  export type CategoriesOnArticlesDeleteArgs = {
    /**
     * Select specific fields to fetch from the CategoriesOnArticles
     * 
    **/
    select?: CategoriesOnArticlesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoriesOnArticlesInclude | null
    /**
     * Filter which CategoriesOnArticles to delete.
     * 
    **/
    where: CategoriesOnArticlesWhereUniqueInput
  }


  /**
   * CategoriesOnArticles deleteMany
   */
  export type CategoriesOnArticlesDeleteManyArgs = {
    /**
     * Filter which CategoriesOnArticles to delete
     * 
    **/
    where?: CategoriesOnArticlesWhereInput
  }


  /**
   * CategoriesOnArticles: findUniqueOrThrow
   */
  export type CategoriesOnArticlesFindUniqueOrThrowArgs = CategoriesOnArticlesFindUniqueArgsBase
      

  /**
   * CategoriesOnArticles: findFirstOrThrow
   */
  export type CategoriesOnArticlesFindFirstOrThrowArgs = CategoriesOnArticlesFindFirstArgsBase
      

  /**
   * CategoriesOnArticles without action
   */
  export type CategoriesOnArticlesArgs = {
    /**
     * Select specific fields to fetch from the CategoriesOnArticles
     * 
    **/
    select?: CategoriesOnArticlesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoriesOnArticlesInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ArticleScalarFieldEnum: {
    artid: 'artid',
    order: 'order',
    authorId: 'authorId',
    title: 'title',
    description: 'description',
    content: 'content',
    keywords: 'keywords',
    status: 'status',
    cover: 'cover',
    password: 'password',
    allowComment: 'allowComment',
    liking: 'liking',
    readers: 'readers',
    banner: 'banner',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ArticleScalarFieldEnum = (typeof ArticleScalarFieldEnum)[keyof typeof ArticleScalarFieldEnum]


  export const BlackListScalarFieldEnum: {
    id: 'id',
    ip: 'ip',
    email: 'email',
    keyword: 'keyword'
  };

  export type BlackListScalarFieldEnum = (typeof BlackListScalarFieldEnum)[keyof typeof BlackListScalarFieldEnum]


  export const CategoriesOnArticlesScalarFieldEnum: {
    articleId: 'articleId',
    categoryId: 'categoryId'
  };

  export type CategoriesOnArticlesScalarFieldEnum = (typeof CategoriesOnArticlesScalarFieldEnum)[keyof typeof CategoriesOnArticlesScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    catid: 'catid',
    name: 'name',
    description: 'description',
    sort: 'sort',
    relateCount: 'relateCount'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    comid: 'comid',
    content: 'content',
    nickname: 'nickname',
    avatar: 'avatar',
    email: 'email',
    url: 'url',
    ip: 'ip',
    agent: 'agent',
    city: 'city',
    province: 'province',
    sort: 'sort',
    liking: 'liking',
    status: 'status',
    articleId: 'articleId',
    articleTitle: 'articleTitle',
    articleDescription: 'articleDescription',
    parent: 'parent',
    parentId: 'parentId',
    parentNickname: 'parentNickname',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  /**
   * Deep Input Types
   */


  export type BlackListWhereInput = {
    AND?: Enumerable<BlackListWhereInput>
    OR?: Enumerable<BlackListWhereInput>
    NOT?: Enumerable<BlackListWhereInput>
    id?: StringFilter | string
    ip?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    keyword?: StringNullableFilter | string | null
  }

  export type BlackListOrderByWithRelationInput = {
    id?: SortOrder
    ip?: SortOrder
    email?: SortOrder
    keyword?: SortOrder
  }

  export type BlackListWhereUniqueInput = {
    id?: string
  }

  export type BlackListOrderByWithAggregationInput = {
    id?: SortOrder
    ip?: SortOrder
    email?: SortOrder
    keyword?: SortOrder
    _count?: BlackListCountOrderByAggregateInput
    _max?: BlackListMaxOrderByAggregateInput
    _min?: BlackListMinOrderByAggregateInput
  }

  export type BlackListScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BlackListScalarWhereWithAggregatesInput>
    OR?: Enumerable<BlackListScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BlackListScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    ip?: StringNullableWithAggregatesFilter | string | null
    email?: StringNullableWithAggregatesFilter | string | null
    keyword?: StringNullableWithAggregatesFilter | string | null
  }

  export type ArticleWhereInput = {
    AND?: Enumerable<ArticleWhereInput>
    OR?: Enumerable<ArticleWhereInput>
    NOT?: Enumerable<ArticleWhereInput>
    artid?: StringFilter | string
    order?: IntFilter | number
    authorId?: StringFilter | string
    title?: StringFilter | string
    description?: StringNullableFilter | string | null
    content?: StringFilter | string
    keywords?: StringFilter | string
    status?: IntFilter | number
    cover?: StringFilter | string
    password?: StringNullableFilter | string | null
    comments?: CommentListRelationFilter
    allowComment?: BoolFilter | boolean
    liking?: IntFilter | number
    readers?: IntFilter | number
    banner?: IntFilter | number
    categories?: CategoriesOnArticlesListRelationFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type ArticleOrderByWithRelationInput = {
    artid?: SortOrder
    order?: SortOrder
    authorId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    content?: SortOrder
    keywords?: SortOrder
    status?: SortOrder
    cover?: SortOrder
    password?: SortOrder
    comments?: CommentOrderByRelationAggregateInput
    allowComment?: SortOrder
    liking?: SortOrder
    readers?: SortOrder
    banner?: SortOrder
    categories?: CategoriesOnArticlesOrderByRelationAggregateInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ArticleWhereUniqueInput = {
    artid?: string
    order?: number
  }

  export type ArticleOrderByWithAggregationInput = {
    artid?: SortOrder
    order?: SortOrder
    authorId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    content?: SortOrder
    keywords?: SortOrder
    status?: SortOrder
    cover?: SortOrder
    password?: SortOrder
    allowComment?: SortOrder
    liking?: SortOrder
    readers?: SortOrder
    banner?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ArticleCountOrderByAggregateInput
    _avg?: ArticleAvgOrderByAggregateInput
    _max?: ArticleMaxOrderByAggregateInput
    _min?: ArticleMinOrderByAggregateInput
    _sum?: ArticleSumOrderByAggregateInput
  }

  export type ArticleScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ArticleScalarWhereWithAggregatesInput>
    OR?: Enumerable<ArticleScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ArticleScalarWhereWithAggregatesInput>
    artid?: StringWithAggregatesFilter | string
    order?: IntWithAggregatesFilter | number
    authorId?: StringWithAggregatesFilter | string
    title?: StringWithAggregatesFilter | string
    description?: StringNullableWithAggregatesFilter | string | null
    content?: StringWithAggregatesFilter | string
    keywords?: StringWithAggregatesFilter | string
    status?: IntWithAggregatesFilter | number
    cover?: StringWithAggregatesFilter | string
    password?: StringNullableWithAggregatesFilter | string | null
    allowComment?: BoolWithAggregatesFilter | boolean
    liking?: IntWithAggregatesFilter | number
    readers?: IntWithAggregatesFilter | number
    banner?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type CommentWhereInput = {
    AND?: Enumerable<CommentWhereInput>
    OR?: Enumerable<CommentWhereInput>
    NOT?: Enumerable<CommentWhereInput>
    comid?: StringFilter | string
    content?: StringFilter | string
    nickname?: StringNullableFilter | string | null
    avatar?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    url?: StringNullableFilter | string | null
    ip?: StringNullableFilter | string | null
    agent?: StringNullableFilter | string | null
    city?: StringNullableFilter | string | null
    province?: StringNullableFilter | string | null
    sort?: IntFilter | number
    liking?: IntFilter | number
    status?: IntFilter | number
    article?: XOR<ArticleRelationFilter, ArticleWhereInput>
    articleId?: StringFilter | string
    articleTitle?: StringNullableFilter | string | null
    articleDescription?: StringNullableFilter | string | null
    parent?: StringNullableFilter | string | null
    parentId?: StringNullableFilter | string | null
    parentNickname?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type CommentOrderByWithRelationInput = {
    comid?: SortOrder
    content?: SortOrder
    nickname?: SortOrder
    avatar?: SortOrder
    email?: SortOrder
    url?: SortOrder
    ip?: SortOrder
    agent?: SortOrder
    city?: SortOrder
    province?: SortOrder
    sort?: SortOrder
    liking?: SortOrder
    status?: SortOrder
    article?: ArticleOrderByWithRelationInput
    articleId?: SortOrder
    articleTitle?: SortOrder
    articleDescription?: SortOrder
    parent?: SortOrder
    parentId?: SortOrder
    parentNickname?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommentWhereUniqueInput = {
    comid?: string
  }

  export type CommentOrderByWithAggregationInput = {
    comid?: SortOrder
    content?: SortOrder
    nickname?: SortOrder
    avatar?: SortOrder
    email?: SortOrder
    url?: SortOrder
    ip?: SortOrder
    agent?: SortOrder
    city?: SortOrder
    province?: SortOrder
    sort?: SortOrder
    liking?: SortOrder
    status?: SortOrder
    articleId?: SortOrder
    articleTitle?: SortOrder
    articleDescription?: SortOrder
    parent?: SortOrder
    parentId?: SortOrder
    parentNickname?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CommentCountOrderByAggregateInput
    _avg?: CommentAvgOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
    _sum?: CommentSumOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CommentScalarWhereWithAggregatesInput>
    OR?: Enumerable<CommentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CommentScalarWhereWithAggregatesInput>
    comid?: StringWithAggregatesFilter | string
    content?: StringWithAggregatesFilter | string
    nickname?: StringNullableWithAggregatesFilter | string | null
    avatar?: StringNullableWithAggregatesFilter | string | null
    email?: StringNullableWithAggregatesFilter | string | null
    url?: StringNullableWithAggregatesFilter | string | null
    ip?: StringNullableWithAggregatesFilter | string | null
    agent?: StringNullableWithAggregatesFilter | string | null
    city?: StringNullableWithAggregatesFilter | string | null
    province?: StringNullableWithAggregatesFilter | string | null
    sort?: IntWithAggregatesFilter | number
    liking?: IntWithAggregatesFilter | number
    status?: IntWithAggregatesFilter | number
    articleId?: StringWithAggregatesFilter | string
    articleTitle?: StringNullableWithAggregatesFilter | string | null
    articleDescription?: StringNullableWithAggregatesFilter | string | null
    parent?: StringNullableWithAggregatesFilter | string | null
    parentId?: StringNullableWithAggregatesFilter | string | null
    parentNickname?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type CategoryWhereInput = {
    AND?: Enumerable<CategoryWhereInput>
    OR?: Enumerable<CategoryWhereInput>
    NOT?: Enumerable<CategoryWhereInput>
    catid?: StringFilter | string
    name?: StringNullableFilter | string | null
    description?: StringNullableFilter | string | null
    sort?: IntNullableFilter | number | null
    relateCount?: IntNullableFilter | number | null
    articles?: CategoriesOnArticlesListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    catid?: SortOrder
    name?: SortOrder
    description?: SortOrder
    sort?: SortOrder
    relateCount?: SortOrder
    articles?: CategoriesOnArticlesOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = {
    catid?: string
  }

  export type CategoryOrderByWithAggregationInput = {
    catid?: SortOrder
    name?: SortOrder
    description?: SortOrder
    sort?: SortOrder
    relateCount?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _avg?: CategoryAvgOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
    _sum?: CategorySumOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    OR?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    catid?: StringWithAggregatesFilter | string
    name?: StringNullableWithAggregatesFilter | string | null
    description?: StringNullableWithAggregatesFilter | string | null
    sort?: IntNullableWithAggregatesFilter | number | null
    relateCount?: IntNullableWithAggregatesFilter | number | null
  }

  export type CategoriesOnArticlesWhereInput = {
    AND?: Enumerable<CategoriesOnArticlesWhereInput>
    OR?: Enumerable<CategoriesOnArticlesWhereInput>
    NOT?: Enumerable<CategoriesOnArticlesWhereInput>
    article?: XOR<ArticleRelationFilter, ArticleWhereInput>
    articleId?: StringFilter | string
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
    categoryId?: StringFilter | string
  }

  export type CategoriesOnArticlesOrderByWithRelationInput = {
    article?: ArticleOrderByWithRelationInput
    articleId?: SortOrder
    category?: CategoryOrderByWithRelationInput
    categoryId?: SortOrder
  }

  export type CategoriesOnArticlesWhereUniqueInput = {
    articleId_categoryId?: CategoriesOnArticlesArticleIdCategoryIdCompoundUniqueInput
  }

  export type CategoriesOnArticlesOrderByWithAggregationInput = {
    articleId?: SortOrder
    categoryId?: SortOrder
    _count?: CategoriesOnArticlesCountOrderByAggregateInput
    _max?: CategoriesOnArticlesMaxOrderByAggregateInput
    _min?: CategoriesOnArticlesMinOrderByAggregateInput
  }

  export type CategoriesOnArticlesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CategoriesOnArticlesScalarWhereWithAggregatesInput>
    OR?: Enumerable<CategoriesOnArticlesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CategoriesOnArticlesScalarWhereWithAggregatesInput>
    articleId?: StringWithAggregatesFilter | string
    categoryId?: StringWithAggregatesFilter | string
  }

  export type BlackListCreateInput = {
    id?: string
    ip?: string | null
    email?: string | null
    keyword?: string | null
  }

  export type BlackListUncheckedCreateInput = {
    id?: string
    ip?: string | null
    email?: string | null
    keyword?: string | null
  }

  export type BlackListUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    keyword?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BlackListUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    keyword?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BlackListCreateManyInput = {
    id?: string
    ip?: string | null
    email?: string | null
    keyword?: string | null
  }

  export type BlackListUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    keyword?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BlackListUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    keyword?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ArticleCreateInput = {
    artid?: string
    order?: number
    authorId: string
    title: string
    description?: string | null
    content: string
    keywords?: string
    status?: number
    cover?: string
    password?: string | null
    comments?: CommentCreateNestedManyWithoutArticleInput
    allowComment?: boolean
    liking?: number
    readers?: number
    banner?: number
    categories?: CategoriesOnArticlesCreateNestedManyWithoutArticleInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ArticleUncheckedCreateInput = {
    artid?: string
    order?: number
    authorId: string
    title: string
    description?: string | null
    content: string
    keywords?: string
    status?: number
    cover?: string
    password?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutArticleInput
    allowComment?: boolean
    liking?: number
    readers?: number
    banner?: number
    categories?: CategoriesOnArticlesUncheckedCreateNestedManyWithoutArticleInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ArticleUpdateInput = {
    artid?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    keywords?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    cover?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUpdateManyWithoutArticleNestedInput
    allowComment?: BoolFieldUpdateOperationsInput | boolean
    liking?: IntFieldUpdateOperationsInput | number
    readers?: IntFieldUpdateOperationsInput | number
    banner?: IntFieldUpdateOperationsInput | number
    categories?: CategoriesOnArticlesUpdateManyWithoutArticleNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArticleUncheckedUpdateInput = {
    artid?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    authorId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    keywords?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    cover?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutArticleNestedInput
    allowComment?: BoolFieldUpdateOperationsInput | boolean
    liking?: IntFieldUpdateOperationsInput | number
    readers?: IntFieldUpdateOperationsInput | number
    banner?: IntFieldUpdateOperationsInput | number
    categories?: CategoriesOnArticlesUncheckedUpdateManyWithoutArticleNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArticleCreateManyInput = {
    artid?: string
    order?: number
    authorId: string
    title: string
    description?: string | null
    content: string
    keywords?: string
    status?: number
    cover?: string
    password?: string | null
    allowComment?: boolean
    liking?: number
    readers?: number
    banner?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ArticleUpdateManyMutationInput = {
    artid?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    keywords?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    cover?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    allowComment?: BoolFieldUpdateOperationsInput | boolean
    liking?: IntFieldUpdateOperationsInput | number
    readers?: IntFieldUpdateOperationsInput | number
    banner?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArticleUncheckedUpdateManyInput = {
    artid?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    authorId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    keywords?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    cover?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    allowComment?: BoolFieldUpdateOperationsInput | boolean
    liking?: IntFieldUpdateOperationsInput | number
    readers?: IntFieldUpdateOperationsInput | number
    banner?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentCreateInput = {
    comid?: string
    content: string
    nickname?: string | null
    avatar?: string | null
    email?: string | null
    url?: string | null
    ip?: string | null
    agent?: string | null
    city?: string | null
    province?: string | null
    sort?: number
    liking?: number
    status?: number
    article: ArticleCreateNestedOneWithoutCommentsInput
    articleTitle?: string | null
    articleDescription?: string | null
    parent?: string | null
    parentId?: string | null
    parentNickname?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentUncheckedCreateInput = {
    comid?: string
    content: string
    nickname?: string | null
    avatar?: string | null
    email?: string | null
    url?: string | null
    ip?: string | null
    agent?: string | null
    city?: string | null
    province?: string | null
    sort?: number
    liking?: number
    status?: number
    articleId: string
    articleTitle?: string | null
    articleDescription?: string | null
    parent?: string | null
    parentId?: string | null
    parentNickname?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentUpdateInput = {
    comid?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    agent?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    sort?: IntFieldUpdateOperationsInput | number
    liking?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
    article?: ArticleUpdateOneRequiredWithoutCommentsNestedInput
    articleTitle?: NullableStringFieldUpdateOperationsInput | string | null
    articleDescription?: NullableStringFieldUpdateOperationsInput | string | null
    parent?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    parentNickname?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateInput = {
    comid?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    agent?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    sort?: IntFieldUpdateOperationsInput | number
    liking?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
    articleId?: StringFieldUpdateOperationsInput | string
    articleTitle?: NullableStringFieldUpdateOperationsInput | string | null
    articleDescription?: NullableStringFieldUpdateOperationsInput | string | null
    parent?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    parentNickname?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentCreateManyInput = {
    comid?: string
    content: string
    nickname?: string | null
    avatar?: string | null
    email?: string | null
    url?: string | null
    ip?: string | null
    agent?: string | null
    city?: string | null
    province?: string | null
    sort?: number
    liking?: number
    status?: number
    articleId: string
    articleTitle?: string | null
    articleDescription?: string | null
    parent?: string | null
    parentId?: string | null
    parentNickname?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentUpdateManyMutationInput = {
    comid?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    agent?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    sort?: IntFieldUpdateOperationsInput | number
    liking?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
    articleTitle?: NullableStringFieldUpdateOperationsInput | string | null
    articleDescription?: NullableStringFieldUpdateOperationsInput | string | null
    parent?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    parentNickname?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyInput = {
    comid?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    agent?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    sort?: IntFieldUpdateOperationsInput | number
    liking?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
    articleId?: StringFieldUpdateOperationsInput | string
    articleTitle?: NullableStringFieldUpdateOperationsInput | string | null
    articleDescription?: NullableStringFieldUpdateOperationsInput | string | null
    parent?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    parentNickname?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryCreateInput = {
    catid?: string
    name?: string | null
    description?: string | null
    sort?: number | null
    relateCount?: number | null
    articles?: CategoriesOnArticlesCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    catid?: string
    name?: string | null
    description?: string | null
    sort?: number | null
    relateCount?: number | null
    articles?: CategoriesOnArticlesUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    catid?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sort?: NullableIntFieldUpdateOperationsInput | number | null
    relateCount?: NullableIntFieldUpdateOperationsInput | number | null
    articles?: CategoriesOnArticlesUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    catid?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sort?: NullableIntFieldUpdateOperationsInput | number | null
    relateCount?: NullableIntFieldUpdateOperationsInput | number | null
    articles?: CategoriesOnArticlesUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    catid?: string
    name?: string | null
    description?: string | null
    sort?: number | null
    relateCount?: number | null
  }

  export type CategoryUpdateManyMutationInput = {
    catid?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sort?: NullableIntFieldUpdateOperationsInput | number | null
    relateCount?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CategoryUncheckedUpdateManyInput = {
    catid?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sort?: NullableIntFieldUpdateOperationsInput | number | null
    relateCount?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CategoriesOnArticlesCreateInput = {
    article: ArticleCreateNestedOneWithoutCategoriesInput
    category: CategoryCreateNestedOneWithoutArticlesInput
  }

  export type CategoriesOnArticlesUncheckedCreateInput = {
    articleId: string
    categoryId: string
  }

  export type CategoriesOnArticlesUpdateInput = {
    article?: ArticleUpdateOneRequiredWithoutCategoriesNestedInput
    category?: CategoryUpdateOneRequiredWithoutArticlesNestedInput
  }

  export type CategoriesOnArticlesUncheckedUpdateInput = {
    articleId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
  }

  export type CategoriesOnArticlesCreateManyInput = {
    articleId: string
    categoryId: string
  }

  export type CategoriesOnArticlesUpdateManyMutationInput = {

  }

  export type CategoriesOnArticlesUncheckedUpdateManyInput = {
    articleId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type BlackListCountOrderByAggregateInput = {
    id?: SortOrder
    ip?: SortOrder
    email?: SortOrder
    keyword?: SortOrder
  }

  export type BlackListMaxOrderByAggregateInput = {
    id?: SortOrder
    ip?: SortOrder
    email?: SortOrder
    keyword?: SortOrder
  }

  export type BlackListMinOrderByAggregateInput = {
    id?: SortOrder
    ip?: SortOrder
    email?: SortOrder
    keyword?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type CategoriesOnArticlesListRelationFilter = {
    every?: CategoriesOnArticlesWhereInput
    some?: CategoriesOnArticlesWhereInput
    none?: CategoriesOnArticlesWhereInput
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoriesOnArticlesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ArticleCountOrderByAggregateInput = {
    artid?: SortOrder
    order?: SortOrder
    authorId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    content?: SortOrder
    keywords?: SortOrder
    status?: SortOrder
    cover?: SortOrder
    password?: SortOrder
    allowComment?: SortOrder
    liking?: SortOrder
    readers?: SortOrder
    banner?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ArticleAvgOrderByAggregateInput = {
    order?: SortOrder
    status?: SortOrder
    liking?: SortOrder
    readers?: SortOrder
    banner?: SortOrder
  }

  export type ArticleMaxOrderByAggregateInput = {
    artid?: SortOrder
    order?: SortOrder
    authorId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    content?: SortOrder
    keywords?: SortOrder
    status?: SortOrder
    cover?: SortOrder
    password?: SortOrder
    allowComment?: SortOrder
    liking?: SortOrder
    readers?: SortOrder
    banner?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ArticleMinOrderByAggregateInput = {
    artid?: SortOrder
    order?: SortOrder
    authorId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    content?: SortOrder
    keywords?: SortOrder
    status?: SortOrder
    cover?: SortOrder
    password?: SortOrder
    allowComment?: SortOrder
    liking?: SortOrder
    readers?: SortOrder
    banner?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ArticleSumOrderByAggregateInput = {
    order?: SortOrder
    status?: SortOrder
    liking?: SortOrder
    readers?: SortOrder
    banner?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type ArticleRelationFilter = {
    is?: ArticleWhereInput
    isNot?: ArticleWhereInput
  }

  export type CommentCountOrderByAggregateInput = {
    comid?: SortOrder
    content?: SortOrder
    nickname?: SortOrder
    avatar?: SortOrder
    email?: SortOrder
    url?: SortOrder
    ip?: SortOrder
    agent?: SortOrder
    city?: SortOrder
    province?: SortOrder
    sort?: SortOrder
    liking?: SortOrder
    status?: SortOrder
    articleId?: SortOrder
    articleTitle?: SortOrder
    articleDescription?: SortOrder
    parent?: SortOrder
    parentId?: SortOrder
    parentNickname?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommentAvgOrderByAggregateInput = {
    sort?: SortOrder
    liking?: SortOrder
    status?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    comid?: SortOrder
    content?: SortOrder
    nickname?: SortOrder
    avatar?: SortOrder
    email?: SortOrder
    url?: SortOrder
    ip?: SortOrder
    agent?: SortOrder
    city?: SortOrder
    province?: SortOrder
    sort?: SortOrder
    liking?: SortOrder
    status?: SortOrder
    articleId?: SortOrder
    articleTitle?: SortOrder
    articleDescription?: SortOrder
    parent?: SortOrder
    parentId?: SortOrder
    parentNickname?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    comid?: SortOrder
    content?: SortOrder
    nickname?: SortOrder
    avatar?: SortOrder
    email?: SortOrder
    url?: SortOrder
    ip?: SortOrder
    agent?: SortOrder
    city?: SortOrder
    province?: SortOrder
    sort?: SortOrder
    liking?: SortOrder
    status?: SortOrder
    articleId?: SortOrder
    articleTitle?: SortOrder
    articleDescription?: SortOrder
    parent?: SortOrder
    parentId?: SortOrder
    parentNickname?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommentSumOrderByAggregateInput = {
    sort?: SortOrder
    liking?: SortOrder
    status?: SortOrder
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type CategoryCountOrderByAggregateInput = {
    catid?: SortOrder
    name?: SortOrder
    description?: SortOrder
    sort?: SortOrder
    relateCount?: SortOrder
  }

  export type CategoryAvgOrderByAggregateInput = {
    sort?: SortOrder
    relateCount?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    catid?: SortOrder
    name?: SortOrder
    description?: SortOrder
    sort?: SortOrder
    relateCount?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    catid?: SortOrder
    name?: SortOrder
    description?: SortOrder
    sort?: SortOrder
    relateCount?: SortOrder
  }

  export type CategorySumOrderByAggregateInput = {
    sort?: SortOrder
    relateCount?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type CategoryRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type CategoriesOnArticlesArticleIdCategoryIdCompoundUniqueInput = {
    articleId: string
    categoryId: string
  }

  export type CategoriesOnArticlesCountOrderByAggregateInput = {
    articleId?: SortOrder
    categoryId?: SortOrder
  }

  export type CategoriesOnArticlesMaxOrderByAggregateInput = {
    articleId?: SortOrder
    categoryId?: SortOrder
  }

  export type CategoriesOnArticlesMinOrderByAggregateInput = {
    articleId?: SortOrder
    categoryId?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type CommentCreateNestedManyWithoutArticleInput = {
    create?: XOR<Enumerable<CommentCreateWithoutArticleInput>, Enumerable<CommentUncheckedCreateWithoutArticleInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutArticleInput>
    createMany?: CommentCreateManyArticleInputEnvelope
    connect?: Enumerable<CommentWhereUniqueInput>
  }

  export type CategoriesOnArticlesCreateNestedManyWithoutArticleInput = {
    create?: XOR<Enumerable<CategoriesOnArticlesCreateWithoutArticleInput>, Enumerable<CategoriesOnArticlesUncheckedCreateWithoutArticleInput>>
    connectOrCreate?: Enumerable<CategoriesOnArticlesCreateOrConnectWithoutArticleInput>
    createMany?: CategoriesOnArticlesCreateManyArticleInputEnvelope
    connect?: Enumerable<CategoriesOnArticlesWhereUniqueInput>
  }

  export type CommentUncheckedCreateNestedManyWithoutArticleInput = {
    create?: XOR<Enumerable<CommentCreateWithoutArticleInput>, Enumerable<CommentUncheckedCreateWithoutArticleInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutArticleInput>
    createMany?: CommentCreateManyArticleInputEnvelope
    connect?: Enumerable<CommentWhereUniqueInput>
  }

  export type CategoriesOnArticlesUncheckedCreateNestedManyWithoutArticleInput = {
    create?: XOR<Enumerable<CategoriesOnArticlesCreateWithoutArticleInput>, Enumerable<CategoriesOnArticlesUncheckedCreateWithoutArticleInput>>
    connectOrCreate?: Enumerable<CategoriesOnArticlesCreateOrConnectWithoutArticleInput>
    createMany?: CategoriesOnArticlesCreateManyArticleInputEnvelope
    connect?: Enumerable<CategoriesOnArticlesWhereUniqueInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CommentUpdateManyWithoutArticleNestedInput = {
    create?: XOR<Enumerable<CommentCreateWithoutArticleInput>, Enumerable<CommentUncheckedCreateWithoutArticleInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutArticleInput>
    upsert?: Enumerable<CommentUpsertWithWhereUniqueWithoutArticleInput>
    createMany?: CommentCreateManyArticleInputEnvelope
    set?: Enumerable<CommentWhereUniqueInput>
    disconnect?: Enumerable<CommentWhereUniqueInput>
    delete?: Enumerable<CommentWhereUniqueInput>
    connect?: Enumerable<CommentWhereUniqueInput>
    update?: Enumerable<CommentUpdateWithWhereUniqueWithoutArticleInput>
    updateMany?: Enumerable<CommentUpdateManyWithWhereWithoutArticleInput>
    deleteMany?: Enumerable<CommentScalarWhereInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type CategoriesOnArticlesUpdateManyWithoutArticleNestedInput = {
    create?: XOR<Enumerable<CategoriesOnArticlesCreateWithoutArticleInput>, Enumerable<CategoriesOnArticlesUncheckedCreateWithoutArticleInput>>
    connectOrCreate?: Enumerable<CategoriesOnArticlesCreateOrConnectWithoutArticleInput>
    upsert?: Enumerable<CategoriesOnArticlesUpsertWithWhereUniqueWithoutArticleInput>
    createMany?: CategoriesOnArticlesCreateManyArticleInputEnvelope
    set?: Enumerable<CategoriesOnArticlesWhereUniqueInput>
    disconnect?: Enumerable<CategoriesOnArticlesWhereUniqueInput>
    delete?: Enumerable<CategoriesOnArticlesWhereUniqueInput>
    connect?: Enumerable<CategoriesOnArticlesWhereUniqueInput>
    update?: Enumerable<CategoriesOnArticlesUpdateWithWhereUniqueWithoutArticleInput>
    updateMany?: Enumerable<CategoriesOnArticlesUpdateManyWithWhereWithoutArticleInput>
    deleteMany?: Enumerable<CategoriesOnArticlesScalarWhereInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CommentUncheckedUpdateManyWithoutArticleNestedInput = {
    create?: XOR<Enumerable<CommentCreateWithoutArticleInput>, Enumerable<CommentUncheckedCreateWithoutArticleInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutArticleInput>
    upsert?: Enumerable<CommentUpsertWithWhereUniqueWithoutArticleInput>
    createMany?: CommentCreateManyArticleInputEnvelope
    set?: Enumerable<CommentWhereUniqueInput>
    disconnect?: Enumerable<CommentWhereUniqueInput>
    delete?: Enumerable<CommentWhereUniqueInput>
    connect?: Enumerable<CommentWhereUniqueInput>
    update?: Enumerable<CommentUpdateWithWhereUniqueWithoutArticleInput>
    updateMany?: Enumerable<CommentUpdateManyWithWhereWithoutArticleInput>
    deleteMany?: Enumerable<CommentScalarWhereInput>
  }

  export type CategoriesOnArticlesUncheckedUpdateManyWithoutArticleNestedInput = {
    create?: XOR<Enumerable<CategoriesOnArticlesCreateWithoutArticleInput>, Enumerable<CategoriesOnArticlesUncheckedCreateWithoutArticleInput>>
    connectOrCreate?: Enumerable<CategoriesOnArticlesCreateOrConnectWithoutArticleInput>
    upsert?: Enumerable<CategoriesOnArticlesUpsertWithWhereUniqueWithoutArticleInput>
    createMany?: CategoriesOnArticlesCreateManyArticleInputEnvelope
    set?: Enumerable<CategoriesOnArticlesWhereUniqueInput>
    disconnect?: Enumerable<CategoriesOnArticlesWhereUniqueInput>
    delete?: Enumerable<CategoriesOnArticlesWhereUniqueInput>
    connect?: Enumerable<CategoriesOnArticlesWhereUniqueInput>
    update?: Enumerable<CategoriesOnArticlesUpdateWithWhereUniqueWithoutArticleInput>
    updateMany?: Enumerable<CategoriesOnArticlesUpdateManyWithWhereWithoutArticleInput>
    deleteMany?: Enumerable<CategoriesOnArticlesScalarWhereInput>
  }

  export type ArticleCreateNestedOneWithoutCommentsInput = {
    create?: XOR<ArticleCreateWithoutCommentsInput, ArticleUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: ArticleCreateOrConnectWithoutCommentsInput
    connect?: ArticleWhereUniqueInput
  }

  export type ArticleUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<ArticleCreateWithoutCommentsInput, ArticleUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: ArticleCreateOrConnectWithoutCommentsInput
    upsert?: ArticleUpsertWithoutCommentsInput
    connect?: ArticleWhereUniqueInput
    update?: XOR<ArticleUpdateWithoutCommentsInput, ArticleUncheckedUpdateWithoutCommentsInput>
  }

  export type CategoriesOnArticlesCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<CategoriesOnArticlesCreateWithoutCategoryInput>, Enumerable<CategoriesOnArticlesUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<CategoriesOnArticlesCreateOrConnectWithoutCategoryInput>
    createMany?: CategoriesOnArticlesCreateManyCategoryInputEnvelope
    connect?: Enumerable<CategoriesOnArticlesWhereUniqueInput>
  }

  export type CategoriesOnArticlesUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<CategoriesOnArticlesCreateWithoutCategoryInput>, Enumerable<CategoriesOnArticlesUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<CategoriesOnArticlesCreateOrConnectWithoutCategoryInput>
    createMany?: CategoriesOnArticlesCreateManyCategoryInputEnvelope
    connect?: Enumerable<CategoriesOnArticlesWhereUniqueInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CategoriesOnArticlesUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<Enumerable<CategoriesOnArticlesCreateWithoutCategoryInput>, Enumerable<CategoriesOnArticlesUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<CategoriesOnArticlesCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<CategoriesOnArticlesUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: CategoriesOnArticlesCreateManyCategoryInputEnvelope
    set?: Enumerable<CategoriesOnArticlesWhereUniqueInput>
    disconnect?: Enumerable<CategoriesOnArticlesWhereUniqueInput>
    delete?: Enumerable<CategoriesOnArticlesWhereUniqueInput>
    connect?: Enumerable<CategoriesOnArticlesWhereUniqueInput>
    update?: Enumerable<CategoriesOnArticlesUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<CategoriesOnArticlesUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<CategoriesOnArticlesScalarWhereInput>
  }

  export type CategoriesOnArticlesUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<Enumerable<CategoriesOnArticlesCreateWithoutCategoryInput>, Enumerable<CategoriesOnArticlesUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<CategoriesOnArticlesCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<CategoriesOnArticlesUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: CategoriesOnArticlesCreateManyCategoryInputEnvelope
    set?: Enumerable<CategoriesOnArticlesWhereUniqueInput>
    disconnect?: Enumerable<CategoriesOnArticlesWhereUniqueInput>
    delete?: Enumerable<CategoriesOnArticlesWhereUniqueInput>
    connect?: Enumerable<CategoriesOnArticlesWhereUniqueInput>
    update?: Enumerable<CategoriesOnArticlesUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<CategoriesOnArticlesUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<CategoriesOnArticlesScalarWhereInput>
  }

  export type ArticleCreateNestedOneWithoutCategoriesInput = {
    create?: XOR<ArticleCreateWithoutCategoriesInput, ArticleUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: ArticleCreateOrConnectWithoutCategoriesInput
    connect?: ArticleWhereUniqueInput
  }

  export type CategoryCreateNestedOneWithoutArticlesInput = {
    create?: XOR<CategoryCreateWithoutArticlesInput, CategoryUncheckedCreateWithoutArticlesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutArticlesInput
    connect?: CategoryWhereUniqueInput
  }

  export type ArticleUpdateOneRequiredWithoutCategoriesNestedInput = {
    create?: XOR<ArticleCreateWithoutCategoriesInput, ArticleUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: ArticleCreateOrConnectWithoutCategoriesInput
    upsert?: ArticleUpsertWithoutCategoriesInput
    connect?: ArticleWhereUniqueInput
    update?: XOR<ArticleUpdateWithoutCategoriesInput, ArticleUncheckedUpdateWithoutCategoriesInput>
  }

  export type CategoryUpdateOneRequiredWithoutArticlesNestedInput = {
    create?: XOR<CategoryCreateWithoutArticlesInput, CategoryUncheckedCreateWithoutArticlesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutArticlesInput
    upsert?: CategoryUpsertWithoutArticlesInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<CategoryUpdateWithoutArticlesInput, CategoryUncheckedUpdateWithoutArticlesInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type CommentCreateWithoutArticleInput = {
    comid?: string
    content: string
    nickname?: string | null
    avatar?: string | null
    email?: string | null
    url?: string | null
    ip?: string | null
    agent?: string | null
    city?: string | null
    province?: string | null
    sort?: number
    liking?: number
    status?: number
    articleTitle?: string | null
    articleDescription?: string | null
    parent?: string | null
    parentId?: string | null
    parentNickname?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentUncheckedCreateWithoutArticleInput = {
    comid?: string
    content: string
    nickname?: string | null
    avatar?: string | null
    email?: string | null
    url?: string | null
    ip?: string | null
    agent?: string | null
    city?: string | null
    province?: string | null
    sort?: number
    liking?: number
    status?: number
    articleTitle?: string | null
    articleDescription?: string | null
    parent?: string | null
    parentId?: string | null
    parentNickname?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentCreateOrConnectWithoutArticleInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutArticleInput, CommentUncheckedCreateWithoutArticleInput>
  }

  export type CommentCreateManyArticleInputEnvelope = {
    data: Enumerable<CommentCreateManyArticleInput>
    skipDuplicates?: boolean
  }

  export type CategoriesOnArticlesCreateWithoutArticleInput = {
    category: CategoryCreateNestedOneWithoutArticlesInput
  }

  export type CategoriesOnArticlesUncheckedCreateWithoutArticleInput = {
    categoryId: string
  }

  export type CategoriesOnArticlesCreateOrConnectWithoutArticleInput = {
    where: CategoriesOnArticlesWhereUniqueInput
    create: XOR<CategoriesOnArticlesCreateWithoutArticleInput, CategoriesOnArticlesUncheckedCreateWithoutArticleInput>
  }

  export type CategoriesOnArticlesCreateManyArticleInputEnvelope = {
    data: Enumerable<CategoriesOnArticlesCreateManyArticleInput>
    skipDuplicates?: boolean
  }

  export type CommentUpsertWithWhereUniqueWithoutArticleInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutArticleInput, CommentUncheckedUpdateWithoutArticleInput>
    create: XOR<CommentCreateWithoutArticleInput, CommentUncheckedCreateWithoutArticleInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutArticleInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutArticleInput, CommentUncheckedUpdateWithoutArticleInput>
  }

  export type CommentUpdateManyWithWhereWithoutArticleInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutCommentsInput>
  }

  export type CommentScalarWhereInput = {
    AND?: Enumerable<CommentScalarWhereInput>
    OR?: Enumerable<CommentScalarWhereInput>
    NOT?: Enumerable<CommentScalarWhereInput>
    comid?: StringFilter | string
    content?: StringFilter | string
    nickname?: StringNullableFilter | string | null
    avatar?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    url?: StringNullableFilter | string | null
    ip?: StringNullableFilter | string | null
    agent?: StringNullableFilter | string | null
    city?: StringNullableFilter | string | null
    province?: StringNullableFilter | string | null
    sort?: IntFilter | number
    liking?: IntFilter | number
    status?: IntFilter | number
    articleId?: StringFilter | string
    articleTitle?: StringNullableFilter | string | null
    articleDescription?: StringNullableFilter | string | null
    parent?: StringNullableFilter | string | null
    parentId?: StringNullableFilter | string | null
    parentNickname?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type CategoriesOnArticlesUpsertWithWhereUniqueWithoutArticleInput = {
    where: CategoriesOnArticlesWhereUniqueInput
    update: XOR<CategoriesOnArticlesUpdateWithoutArticleInput, CategoriesOnArticlesUncheckedUpdateWithoutArticleInput>
    create: XOR<CategoriesOnArticlesCreateWithoutArticleInput, CategoriesOnArticlesUncheckedCreateWithoutArticleInput>
  }

  export type CategoriesOnArticlesUpdateWithWhereUniqueWithoutArticleInput = {
    where: CategoriesOnArticlesWhereUniqueInput
    data: XOR<CategoriesOnArticlesUpdateWithoutArticleInput, CategoriesOnArticlesUncheckedUpdateWithoutArticleInput>
  }

  export type CategoriesOnArticlesUpdateManyWithWhereWithoutArticleInput = {
    where: CategoriesOnArticlesScalarWhereInput
    data: XOR<CategoriesOnArticlesUpdateManyMutationInput, CategoriesOnArticlesUncheckedUpdateManyWithoutCategoriesInput>
  }

  export type CategoriesOnArticlesScalarWhereInput = {
    AND?: Enumerable<CategoriesOnArticlesScalarWhereInput>
    OR?: Enumerable<CategoriesOnArticlesScalarWhereInput>
    NOT?: Enumerable<CategoriesOnArticlesScalarWhereInput>
    articleId?: StringFilter | string
    categoryId?: StringFilter | string
  }

  export type ArticleCreateWithoutCommentsInput = {
    artid?: string
    order?: number
    authorId: string
    title: string
    description?: string | null
    content: string
    keywords?: string
    status?: number
    cover?: string
    password?: string | null
    allowComment?: boolean
    liking?: number
    readers?: number
    banner?: number
    categories?: CategoriesOnArticlesCreateNestedManyWithoutArticleInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ArticleUncheckedCreateWithoutCommentsInput = {
    artid?: string
    order?: number
    authorId: string
    title: string
    description?: string | null
    content: string
    keywords?: string
    status?: number
    cover?: string
    password?: string | null
    allowComment?: boolean
    liking?: number
    readers?: number
    banner?: number
    categories?: CategoriesOnArticlesUncheckedCreateNestedManyWithoutArticleInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ArticleCreateOrConnectWithoutCommentsInput = {
    where: ArticleWhereUniqueInput
    create: XOR<ArticleCreateWithoutCommentsInput, ArticleUncheckedCreateWithoutCommentsInput>
  }

  export type ArticleUpsertWithoutCommentsInput = {
    update: XOR<ArticleUpdateWithoutCommentsInput, ArticleUncheckedUpdateWithoutCommentsInput>
    create: XOR<ArticleCreateWithoutCommentsInput, ArticleUncheckedCreateWithoutCommentsInput>
  }

  export type ArticleUpdateWithoutCommentsInput = {
    artid?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    keywords?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    cover?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    allowComment?: BoolFieldUpdateOperationsInput | boolean
    liking?: IntFieldUpdateOperationsInput | number
    readers?: IntFieldUpdateOperationsInput | number
    banner?: IntFieldUpdateOperationsInput | number
    categories?: CategoriesOnArticlesUpdateManyWithoutArticleNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArticleUncheckedUpdateWithoutCommentsInput = {
    artid?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    authorId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    keywords?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    cover?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    allowComment?: BoolFieldUpdateOperationsInput | boolean
    liking?: IntFieldUpdateOperationsInput | number
    readers?: IntFieldUpdateOperationsInput | number
    banner?: IntFieldUpdateOperationsInput | number
    categories?: CategoriesOnArticlesUncheckedUpdateManyWithoutArticleNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoriesOnArticlesCreateWithoutCategoryInput = {
    article: ArticleCreateNestedOneWithoutCategoriesInput
  }

  export type CategoriesOnArticlesUncheckedCreateWithoutCategoryInput = {
    articleId: string
  }

  export type CategoriesOnArticlesCreateOrConnectWithoutCategoryInput = {
    where: CategoriesOnArticlesWhereUniqueInput
    create: XOR<CategoriesOnArticlesCreateWithoutCategoryInput, CategoriesOnArticlesUncheckedCreateWithoutCategoryInput>
  }

  export type CategoriesOnArticlesCreateManyCategoryInputEnvelope = {
    data: Enumerable<CategoriesOnArticlesCreateManyCategoryInput>
    skipDuplicates?: boolean
  }

  export type CategoriesOnArticlesUpsertWithWhereUniqueWithoutCategoryInput = {
    where: CategoriesOnArticlesWhereUniqueInput
    update: XOR<CategoriesOnArticlesUpdateWithoutCategoryInput, CategoriesOnArticlesUncheckedUpdateWithoutCategoryInput>
    create: XOR<CategoriesOnArticlesCreateWithoutCategoryInput, CategoriesOnArticlesUncheckedCreateWithoutCategoryInput>
  }

  export type CategoriesOnArticlesUpdateWithWhereUniqueWithoutCategoryInput = {
    where: CategoriesOnArticlesWhereUniqueInput
    data: XOR<CategoriesOnArticlesUpdateWithoutCategoryInput, CategoriesOnArticlesUncheckedUpdateWithoutCategoryInput>
  }

  export type CategoriesOnArticlesUpdateManyWithWhereWithoutCategoryInput = {
    where: CategoriesOnArticlesScalarWhereInput
    data: XOR<CategoriesOnArticlesUpdateManyMutationInput, CategoriesOnArticlesUncheckedUpdateManyWithoutArticlesInput>
  }

  export type ArticleCreateWithoutCategoriesInput = {
    artid?: string
    order?: number
    authorId: string
    title: string
    description?: string | null
    content: string
    keywords?: string
    status?: number
    cover?: string
    password?: string | null
    comments?: CommentCreateNestedManyWithoutArticleInput
    allowComment?: boolean
    liking?: number
    readers?: number
    banner?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ArticleUncheckedCreateWithoutCategoriesInput = {
    artid?: string
    order?: number
    authorId: string
    title: string
    description?: string | null
    content: string
    keywords?: string
    status?: number
    cover?: string
    password?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutArticleInput
    allowComment?: boolean
    liking?: number
    readers?: number
    banner?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ArticleCreateOrConnectWithoutCategoriesInput = {
    where: ArticleWhereUniqueInput
    create: XOR<ArticleCreateWithoutCategoriesInput, ArticleUncheckedCreateWithoutCategoriesInput>
  }

  export type CategoryCreateWithoutArticlesInput = {
    catid?: string
    name?: string | null
    description?: string | null
    sort?: number | null
    relateCount?: number | null
  }

  export type CategoryUncheckedCreateWithoutArticlesInput = {
    catid?: string
    name?: string | null
    description?: string | null
    sort?: number | null
    relateCount?: number | null
  }

  export type CategoryCreateOrConnectWithoutArticlesInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutArticlesInput, CategoryUncheckedCreateWithoutArticlesInput>
  }

  export type ArticleUpsertWithoutCategoriesInput = {
    update: XOR<ArticleUpdateWithoutCategoriesInput, ArticleUncheckedUpdateWithoutCategoriesInput>
    create: XOR<ArticleCreateWithoutCategoriesInput, ArticleUncheckedCreateWithoutCategoriesInput>
  }

  export type ArticleUpdateWithoutCategoriesInput = {
    artid?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    keywords?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    cover?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUpdateManyWithoutArticleNestedInput
    allowComment?: BoolFieldUpdateOperationsInput | boolean
    liking?: IntFieldUpdateOperationsInput | number
    readers?: IntFieldUpdateOperationsInput | number
    banner?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArticleUncheckedUpdateWithoutCategoriesInput = {
    artid?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    authorId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    keywords?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    cover?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutArticleNestedInput
    allowComment?: BoolFieldUpdateOperationsInput | boolean
    liking?: IntFieldUpdateOperationsInput | number
    readers?: IntFieldUpdateOperationsInput | number
    banner?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUpsertWithoutArticlesInput = {
    update: XOR<CategoryUpdateWithoutArticlesInput, CategoryUncheckedUpdateWithoutArticlesInput>
    create: XOR<CategoryCreateWithoutArticlesInput, CategoryUncheckedCreateWithoutArticlesInput>
  }

  export type CategoryUpdateWithoutArticlesInput = {
    catid?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sort?: NullableIntFieldUpdateOperationsInput | number | null
    relateCount?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CategoryUncheckedUpdateWithoutArticlesInput = {
    catid?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sort?: NullableIntFieldUpdateOperationsInput | number | null
    relateCount?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CommentCreateManyArticleInput = {
    comid?: string
    content: string
    nickname?: string | null
    avatar?: string | null
    email?: string | null
    url?: string | null
    ip?: string | null
    agent?: string | null
    city?: string | null
    province?: string | null
    sort?: number
    liking?: number
    status?: number
    articleTitle?: string | null
    articleDescription?: string | null
    parent?: string | null
    parentId?: string | null
    parentNickname?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategoriesOnArticlesCreateManyArticleInput = {
    categoryId: string
  }

  export type CommentUpdateWithoutArticleInput = {
    comid?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    agent?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    sort?: IntFieldUpdateOperationsInput | number
    liking?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
    articleTitle?: NullableStringFieldUpdateOperationsInput | string | null
    articleDescription?: NullableStringFieldUpdateOperationsInput | string | null
    parent?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    parentNickname?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateWithoutArticleInput = {
    comid?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    agent?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    sort?: IntFieldUpdateOperationsInput | number
    liking?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
    articleTitle?: NullableStringFieldUpdateOperationsInput | string | null
    articleDescription?: NullableStringFieldUpdateOperationsInput | string | null
    parent?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    parentNickname?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyWithoutCommentsInput = {
    comid?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    agent?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    sort?: IntFieldUpdateOperationsInput | number
    liking?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
    articleTitle?: NullableStringFieldUpdateOperationsInput | string | null
    articleDescription?: NullableStringFieldUpdateOperationsInput | string | null
    parent?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    parentNickname?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoriesOnArticlesUpdateWithoutArticleInput = {
    category?: CategoryUpdateOneRequiredWithoutArticlesNestedInput
  }

  export type CategoriesOnArticlesUncheckedUpdateWithoutArticleInput = {
    categoryId?: StringFieldUpdateOperationsInput | string
  }

  export type CategoriesOnArticlesUncheckedUpdateManyWithoutCategoriesInput = {
    categoryId?: StringFieldUpdateOperationsInput | string
  }

  export type CategoriesOnArticlesCreateManyCategoryInput = {
    articleId: string
  }

  export type CategoriesOnArticlesUpdateWithoutCategoryInput = {
    article?: ArticleUpdateOneRequiredWithoutCategoriesNestedInput
  }

  export type CategoriesOnArticlesUncheckedUpdateWithoutCategoryInput = {
    articleId?: StringFieldUpdateOperationsInput | string
  }

  export type CategoriesOnArticlesUncheckedUpdateManyWithoutArticlesInput = {
    articleId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}