// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 黑名单
model BlackList {
  id      String  @id @default(uuid())
  ip      String?
  email   String?
  keyword String?

  @@map("t_blacklist")
}

model User {
  userid   String    @id @default(uuid())
  name     String
  nickname String?
  password String
  articles Article[]

  @@map("t_user")
}

model Article {
  artid    String @id @default(uuid())
  order    Int    @unique @default(autoincrement())
  author   User   @relation(fields: [authorId], references: [userid])
  authorId String @map("author_id")

  title       String
  description String?
  content     String  @db.LongText

  keywords String @default("")
  status   Int    @default(0) //0: 草稿 1:发布 3：删除

  cover    String    @default("")
  visible  Boolean   @default(true)
  password String? // 加密文章
  comments Comment[]

  allowComment Boolean                @default(true) @map("allow_comment")
  liking       Int                    @default(0)
  readers      Int                    @default(0)
  banner       Int                    @default(-1) //-1 不在 banner 区域展示， >0 banner 区域的顺序
  categories   CategoriesOnArticles[]
  columns      ColumnsOnArticles[]
  tags         TagsOnArticles[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("t_articles")
}

model Comment {
  comid    String  @id @default(uuid())
  content  String  @db.TinyText
  nickname String?
  avatar   String?
  email    String?
  url      String?
  ip       String?
  agent    String?
  city     String?
  province String?

  sort   Int @default(0)
  liking Int @default(0)
  status Int @default(1) //0:隐藏 1:展示

  article            Article @relation(fields: [articleId], references: [artid])
  articleId          String  @map("article_id")
  articleTitle       String? @map("article_title")
  articleDescription String? @map("article_description")

  parent         String?
  parentId       String? @map("parent_id")
  parentNickname String? @map("parent_nickname")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("t_comment")
}

model Category {
  catid       String                 @id @default(uuid())
  name        String?
  description String?
  sort        Int?                   @default(0)
  relateCount Int?                   @default(0) @map("relate_count")
  articles    CategoriesOnArticles[]
  visible     Boolean                @default(true)

  @@map("t_category")
}

model CategoriesOnArticles {
  article    Article  @relation(fields: [articleId], references: [artid])
  articleId  String   @map("article_id")
  category   Category @relation(fields: [categoryId], references: [catid])
  categoryId String   @map("category_id")

  @@id([articleId, categoryId])
  @@map("categories_on_articles")
}

model Column {
  colid       String              @id @default(uuid())
  name        String
  description String?
  cover       String?
  visible     Boolean             @default(true)
  relateCount Int?                @default(0) @map("relate_count")
  articles    ColumnsOnArticles[]

  @@map("t_column")
}

model ColumnsOnArticles {
  article   Article @relation(fields: [articleId], references: [artid])
  articleId String  @map("article_id")
  column    Column  @relation(fields: [columnId], references: [colid])
  columnId  String  @map("column_id")

  @@id([articleId, columnId])
  @@map("columns_on_articles")
}

model Tag {
  tagid       String           @id @default(uuid())
  name        String
  visible     Boolean          @default(true)
  relateCount Int?             @default(0) @map("relate_count")
  articles    TagsOnArticles[]

  @@map("t_tag")
}

model TagsOnArticles {
  article   Article @relation(fields: [articleId], references: [artid])
  articleId String  @map("article_id")
  tag       Tag     @relation(fields: [tagId], references: [tagid])
  tagId     String  @map("tag_id")

  @@id([articleId, tagId])
  @@map("tags_on_articles")
}
